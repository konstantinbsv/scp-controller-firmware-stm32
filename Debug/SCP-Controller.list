
SCP-Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000407c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004244  08004244  00014244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800425c  0800425c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800425c  0800425c  0001425c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004264  08004264  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004264  08004264  00014264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004268  08004268  00014268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800426c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08004278  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08004278  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a85a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000184f  00000000  00000000  0002a896  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a48  00000000  00000000  0002c0e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000990  00000000  00000000  0002cb30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000210ba  00000000  00000000  0002d4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008c4d  00000000  00000000  0004e57a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cacfd  00000000  00000000  000571c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00121ec4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002be4  00000000  00000000  00121f40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800422c 	.word	0x0800422c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	0800422c 	.word	0x0800422c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_d2f>:
 80009e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ec:	bf24      	itt	cs
 80009ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009f6:	d90d      	bls.n	8000a14 <__aeabi_d2f+0x30>
 80009f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a0c:	bf08      	it	eq
 8000a0e:	f020 0001 	biceq.w	r0, r0, #1
 8000a12:	4770      	bx	lr
 8000a14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a18:	d121      	bne.n	8000a5e <__aeabi_d2f+0x7a>
 8000a1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a1e:	bfbc      	itt	lt
 8000a20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a24:	4770      	bxlt	lr
 8000a26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a2e:	f1c2 0218 	rsb	r2, r2, #24
 8000a32:	f1c2 0c20 	rsb	ip, r2, #32
 8000a36:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a3a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a3e:	bf18      	it	ne
 8000a40:	f040 0001 	orrne.w	r0, r0, #1
 8000a44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a50:	ea40 000c 	orr.w	r0, r0, ip
 8000a54:	fa23 f302 	lsr.w	r3, r3, r2
 8000a58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a5c:	e7cc      	b.n	80009f8 <__aeabi_d2f+0x14>
 8000a5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a62:	d107      	bne.n	8000a74 <__aeabi_d2f+0x90>
 8000a64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a68:	bf1e      	ittt	ne
 8000a6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a72:	4770      	bxne	lr
 8000a74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_uldivmod>:
 8000a84:	b953      	cbnz	r3, 8000a9c <__aeabi_uldivmod+0x18>
 8000a86:	b94a      	cbnz	r2, 8000a9c <__aeabi_uldivmod+0x18>
 8000a88:	2900      	cmp	r1, #0
 8000a8a:	bf08      	it	eq
 8000a8c:	2800      	cmpeq	r0, #0
 8000a8e:	bf1c      	itt	ne
 8000a90:	f04f 31ff 	movne.w	r1, #4294967295
 8000a94:	f04f 30ff 	movne.w	r0, #4294967295
 8000a98:	f000 b972 	b.w	8000d80 <__aeabi_idiv0>
 8000a9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa4:	f000 f806 	bl	8000ab4 <__udivmoddi4>
 8000aa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab0:	b004      	add	sp, #16
 8000ab2:	4770      	bx	lr

08000ab4 <__udivmoddi4>:
 8000ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab8:	9e08      	ldr	r6, [sp, #32]
 8000aba:	4604      	mov	r4, r0
 8000abc:	4688      	mov	r8, r1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d14b      	bne.n	8000b5a <__udivmoddi4+0xa6>
 8000ac2:	428a      	cmp	r2, r1
 8000ac4:	4615      	mov	r5, r2
 8000ac6:	d967      	bls.n	8000b98 <__udivmoddi4+0xe4>
 8000ac8:	fab2 f282 	clz	r2, r2
 8000acc:	b14a      	cbz	r2, 8000ae2 <__udivmoddi4+0x2e>
 8000ace:	f1c2 0720 	rsb	r7, r2, #32
 8000ad2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ad6:	fa20 f707 	lsr.w	r7, r0, r7
 8000ada:	4095      	lsls	r5, r2
 8000adc:	ea47 0803 	orr.w	r8, r7, r3
 8000ae0:	4094      	lsls	r4, r2
 8000ae2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ae6:	0c23      	lsrs	r3, r4, #16
 8000ae8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000aec:	fa1f fc85 	uxth.w	ip, r5
 8000af0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000af4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af8:	fb07 f10c 	mul.w	r1, r7, ip
 8000afc:	4299      	cmp	r1, r3
 8000afe:	d909      	bls.n	8000b14 <__udivmoddi4+0x60>
 8000b00:	18eb      	adds	r3, r5, r3
 8000b02:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b06:	f080 811b 	bcs.w	8000d40 <__udivmoddi4+0x28c>
 8000b0a:	4299      	cmp	r1, r3
 8000b0c:	f240 8118 	bls.w	8000d40 <__udivmoddi4+0x28c>
 8000b10:	3f02      	subs	r7, #2
 8000b12:	442b      	add	r3, r5
 8000b14:	1a5b      	subs	r3, r3, r1
 8000b16:	b2a4      	uxth	r4, r4
 8000b18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b24:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b28:	45a4      	cmp	ip, r4
 8000b2a:	d909      	bls.n	8000b40 <__udivmoddi4+0x8c>
 8000b2c:	192c      	adds	r4, r5, r4
 8000b2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b32:	f080 8107 	bcs.w	8000d44 <__udivmoddi4+0x290>
 8000b36:	45a4      	cmp	ip, r4
 8000b38:	f240 8104 	bls.w	8000d44 <__udivmoddi4+0x290>
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	442c      	add	r4, r5
 8000b40:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b44:	eba4 040c 	sub.w	r4, r4, ip
 8000b48:	2700      	movs	r7, #0
 8000b4a:	b11e      	cbz	r6, 8000b54 <__udivmoddi4+0xa0>
 8000b4c:	40d4      	lsrs	r4, r2
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e9c6 4300 	strd	r4, r3, [r6]
 8000b54:	4639      	mov	r1, r7
 8000b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	d909      	bls.n	8000b72 <__udivmoddi4+0xbe>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	f000 80eb 	beq.w	8000d3a <__udivmoddi4+0x286>
 8000b64:	2700      	movs	r7, #0
 8000b66:	e9c6 0100 	strd	r0, r1, [r6]
 8000b6a:	4638      	mov	r0, r7
 8000b6c:	4639      	mov	r1, r7
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	fab3 f783 	clz	r7, r3
 8000b76:	2f00      	cmp	r7, #0
 8000b78:	d147      	bne.n	8000c0a <__udivmoddi4+0x156>
 8000b7a:	428b      	cmp	r3, r1
 8000b7c:	d302      	bcc.n	8000b84 <__udivmoddi4+0xd0>
 8000b7e:	4282      	cmp	r2, r0
 8000b80:	f200 80fa 	bhi.w	8000d78 <__udivmoddi4+0x2c4>
 8000b84:	1a84      	subs	r4, r0, r2
 8000b86:	eb61 0303 	sbc.w	r3, r1, r3
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	4698      	mov	r8, r3
 8000b8e:	2e00      	cmp	r6, #0
 8000b90:	d0e0      	beq.n	8000b54 <__udivmoddi4+0xa0>
 8000b92:	e9c6 4800 	strd	r4, r8, [r6]
 8000b96:	e7dd      	b.n	8000b54 <__udivmoddi4+0xa0>
 8000b98:	b902      	cbnz	r2, 8000b9c <__udivmoddi4+0xe8>
 8000b9a:	deff      	udf	#255	; 0xff
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	f040 808f 	bne.w	8000cc4 <__udivmoddi4+0x210>
 8000ba6:	1b49      	subs	r1, r1, r5
 8000ba8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bac:	fa1f f885 	uxth.w	r8, r5
 8000bb0:	2701      	movs	r7, #1
 8000bb2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bb6:	0c23      	lsrs	r3, r4, #16
 8000bb8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc0:	fb08 f10c 	mul.w	r1, r8, ip
 8000bc4:	4299      	cmp	r1, r3
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x124>
 8000bc8:	18eb      	adds	r3, r5, r3
 8000bca:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x122>
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2bc>
 8000bd6:	4684      	mov	ip, r0
 8000bd8:	1a59      	subs	r1, r3, r1
 8000bda:	b2a3      	uxth	r3, r4
 8000bdc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000be0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000be4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000be8:	fb08 f800 	mul.w	r8, r8, r0
 8000bec:	45a0      	cmp	r8, r4
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x14c>
 8000bf0:	192c      	adds	r4, r5, r4
 8000bf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x14a>
 8000bf8:	45a0      	cmp	r8, r4
 8000bfa:	f200 80b6 	bhi.w	8000d6a <__udivmoddi4+0x2b6>
 8000bfe:	4618      	mov	r0, r3
 8000c00:	eba4 0408 	sub.w	r4, r4, r8
 8000c04:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c08:	e79f      	b.n	8000b4a <__udivmoddi4+0x96>
 8000c0a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c0e:	40bb      	lsls	r3, r7
 8000c10:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c14:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c18:	fa01 f407 	lsl.w	r4, r1, r7
 8000c1c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c20:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c24:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c28:	4325      	orrs	r5, r4
 8000c2a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c2e:	0c2c      	lsrs	r4, r5, #16
 8000c30:	fb08 3319 	mls	r3, r8, r9, r3
 8000c34:	fa1f fa8e 	uxth.w	sl, lr
 8000c38:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c3c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c40:	429c      	cmp	r4, r3
 8000c42:	fa02 f207 	lsl.w	r2, r2, r7
 8000c46:	fa00 f107 	lsl.w	r1, r0, r7
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b0>
 8000c4c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c50:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c54:	f080 8087 	bcs.w	8000d66 <__udivmoddi4+0x2b2>
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	f240 8084 	bls.w	8000d66 <__udivmoddi4+0x2b2>
 8000c5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c62:	4473      	add	r3, lr
 8000c64:	1b1b      	subs	r3, r3, r4
 8000c66:	b2ad      	uxth	r5, r5
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c70:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c74:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c78:	45a2      	cmp	sl, r4
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1da>
 8000c7c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c84:	d26b      	bcs.n	8000d5e <__udivmoddi4+0x2aa>
 8000c86:	45a2      	cmp	sl, r4
 8000c88:	d969      	bls.n	8000d5e <__udivmoddi4+0x2aa>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4474      	add	r4, lr
 8000c8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c92:	fba0 8902 	umull	r8, r9, r0, r2
 8000c96:	eba4 040a 	sub.w	r4, r4, sl
 8000c9a:	454c      	cmp	r4, r9
 8000c9c:	46c2      	mov	sl, r8
 8000c9e:	464b      	mov	r3, r9
 8000ca0:	d354      	bcc.n	8000d4c <__udivmoddi4+0x298>
 8000ca2:	d051      	beq.n	8000d48 <__udivmoddi4+0x294>
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d069      	beq.n	8000d7c <__udivmoddi4+0x2c8>
 8000ca8:	ebb1 050a 	subs.w	r5, r1, sl
 8000cac:	eb64 0403 	sbc.w	r4, r4, r3
 8000cb0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cb4:	40fd      	lsrs	r5, r7
 8000cb6:	40fc      	lsrs	r4, r7
 8000cb8:	ea4c 0505 	orr.w	r5, ip, r5
 8000cbc:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	e747      	b.n	8000b54 <__udivmoddi4+0xa0>
 8000cc4:	f1c2 0320 	rsb	r3, r2, #32
 8000cc8:	fa20 f703 	lsr.w	r7, r0, r3
 8000ccc:	4095      	lsls	r5, r2
 8000cce:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd2:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	4338      	orrs	r0, r7
 8000cdc:	0c01      	lsrs	r1, r0, #16
 8000cde:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ce2:	fa1f f885 	uxth.w	r8, r5
 8000ce6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cee:	fb07 f308 	mul.w	r3, r7, r8
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x256>
 8000cfa:	1869      	adds	r1, r5, r1
 8000cfc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d00:	d22f      	bcs.n	8000d62 <__udivmoddi4+0x2ae>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d92d      	bls.n	8000d62 <__udivmoddi4+0x2ae>
 8000d06:	3f02      	subs	r7, #2
 8000d08:	4429      	add	r1, r5
 8000d0a:	1acb      	subs	r3, r1, r3
 8000d0c:	b281      	uxth	r1, r0
 8000d0e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d12:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d16:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1a:	fb00 f308 	mul.w	r3, r0, r8
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d907      	bls.n	8000d32 <__udivmoddi4+0x27e>
 8000d22:	1869      	adds	r1, r5, r1
 8000d24:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d28:	d217      	bcs.n	8000d5a <__udivmoddi4+0x2a6>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d915      	bls.n	8000d5a <__udivmoddi4+0x2a6>
 8000d2e:	3802      	subs	r0, #2
 8000d30:	4429      	add	r1, r5
 8000d32:	1ac9      	subs	r1, r1, r3
 8000d34:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d38:	e73b      	b.n	8000bb2 <__udivmoddi4+0xfe>
 8000d3a:	4637      	mov	r7, r6
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e709      	b.n	8000b54 <__udivmoddi4+0xa0>
 8000d40:	4607      	mov	r7, r0
 8000d42:	e6e7      	b.n	8000b14 <__udivmoddi4+0x60>
 8000d44:	4618      	mov	r0, r3
 8000d46:	e6fb      	b.n	8000b40 <__udivmoddi4+0x8c>
 8000d48:	4541      	cmp	r1, r8
 8000d4a:	d2ab      	bcs.n	8000ca4 <__udivmoddi4+0x1f0>
 8000d4c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d50:	eb69 020e 	sbc.w	r2, r9, lr
 8000d54:	3801      	subs	r0, #1
 8000d56:	4613      	mov	r3, r2
 8000d58:	e7a4      	b.n	8000ca4 <__udivmoddi4+0x1f0>
 8000d5a:	4660      	mov	r0, ip
 8000d5c:	e7e9      	b.n	8000d32 <__udivmoddi4+0x27e>
 8000d5e:	4618      	mov	r0, r3
 8000d60:	e795      	b.n	8000c8e <__udivmoddi4+0x1da>
 8000d62:	4667      	mov	r7, ip
 8000d64:	e7d1      	b.n	8000d0a <__udivmoddi4+0x256>
 8000d66:	4681      	mov	r9, r0
 8000d68:	e77c      	b.n	8000c64 <__udivmoddi4+0x1b0>
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	442c      	add	r4, r5
 8000d6e:	e747      	b.n	8000c00 <__udivmoddi4+0x14c>
 8000d70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d74:	442b      	add	r3, r5
 8000d76:	e72f      	b.n	8000bd8 <__udivmoddi4+0x124>
 8000d78:	4638      	mov	r0, r7
 8000d7a:	e708      	b.n	8000b8e <__udivmoddi4+0xda>
 8000d7c:	4637      	mov	r7, r6
 8000d7e:	e6e9      	b.n	8000b54 <__udivmoddi4+0xa0>

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <InitializeI2C>:
static I2C_HandleTypeDef *ina219_i2c_handle = NULL;

/**
 * Initialize I2C handle
 */
HAL_StatusTypeDef InitializeI2C (I2C_HandleTypeDef *i2c_handle) {
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	ina219_i2c_handle = i2c_handle;
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <InitializeI2C+0x1c>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6013      	str	r3, [r2, #0]

	return HAL_OK;
 8000d92:	2300      	movs	r3, #0
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	20000028 	.word	0x20000028

08000da4 <ReadRegister>:


HAL_StatusTypeDef ReadRegister (uint8_t device_address, uint8_t reg_address, uint16_t *read_data) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af04      	add	r7, sp, #16
 8000daa:	4603      	mov	r3, r0
 8000dac:	603a      	str	r2, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
 8000db0:	460b      	mov	r3, r1
 8000db2:	71bb      	strb	r3, [r7, #6]
	uint8_t read_buffer[2];
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(ina219_i2c_handle, device_address, reg_address, I2C_MEMADD_SIZE_8BIT, read_buffer, INA219_REG_BYTES_SIZE, I2C_TIMEOUT);
 8000db4:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <ReadRegister+0x54>)
 8000db6:	6818      	ldr	r0, [r3, #0]
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	b299      	uxth	r1, r3
 8000dbc:	79bb      	ldrb	r3, [r7, #6]
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc4:	9302      	str	r3, [sp, #8]
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	f107 030c 	add.w	r3, r7, #12
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	f001 fba3 	bl	800251c <HAL_I2C_Mem_Read>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	73fb      	strb	r3, [r7, #15]
	*read_data = read_buffer[0] << 8 | read_buffer[1];
 8000dda:	7b3b      	ldrb	r3, [r7, #12]
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	7b7b      	ldrb	r3, [r7, #13]
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	4313      	orrs	r3, r2
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	801a      	strh	r2, [r3, #0]

	return status;
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000028 	.word	0x20000028

08000dfc <WriteRegister>:

HAL_StatusTypeDef WriteRegister (uint8_t device_address, uint8_t reg_address, uint16_t write_data) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af04      	add	r7, sp, #16
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
 8000e06:	460b      	mov	r3, r1
 8000e08:	71bb      	strb	r3, [r7, #6]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	80bb      	strh	r3, [r7, #4]

	uint8_t write_buffer[2] = { (uint8_t) (write_data >> 8), (uint8_t) (write_data) };
 8000e0e:	88bb      	ldrh	r3, [r7, #4]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	733b      	strb	r3, [r7, #12]
 8000e18:	88bb      	ldrh	r3, [r7, #4]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	737b      	strb	r3, [r7, #13]

	return HAL_I2C_Mem_Write(ina219_i2c_handle, device_address, reg_address, I2C_MEMADD_SIZE_8BIT, write_buffer, INA219_REG_BYTES_SIZE, I2C_TIMEOUT);
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <WriteRegister+0x50>)
 8000e20:	6818      	ldr	r0, [r3, #0]
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	b299      	uxth	r1, r3
 8000e26:	79bb      	ldrb	r3, [r7, #6]
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	9302      	str	r3, [sp, #8]
 8000e30:	2302      	movs	r3, #2
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	f001 fa74 	bl	8002328 <HAL_I2C_Mem_Write>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000028 	.word	0x20000028

08000e50 <Set_16V_1A55>:

/*
 * Set PGA gain and registers for measuring up to 16V and 1.15A
 */
HAL_StatusTypeDef Set_16V_1A55 (uint8_t device_address) {
 8000e50:	b590      	push	{r4, r7, lr}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	uint16_t config_reg = 	INA219_BRNG_16V | INA219_PGA_160mV |
 8000e5a:	f241 139f 	movw	r3, #4511	; 0x119f
 8000e5e:	81fb      	strh	r3, [r7, #14]
							INA219_SADC_12BIT | INA219_BADC_12BIT |
							INA219_MODE_S_AND_B_V_CONTINUOUS;
	current_lsb 	= 1.55 / 32768;			// max_current / 2^15
 8000e60:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <Set_16V_1A55+0xb0>)
 8000e62:	4a28      	ldr	r2, [pc, #160]	; (8000f04 <Set_16V_1A55+0xb4>)
 8000e64:	601a      	str	r2, [r3, #0]
	power_lsb 		= current_lsb * 20;
 8000e66:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <Set_16V_1A55+0xb0>)
 8000e68:	edd3 7a00 	vldr	s15, [r3]
 8000e6c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000e70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e74:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <Set_16V_1A55+0xb8>)
 8000e76:	edc3 7a00 	vstr	s15, [r3]
	cal_reg 		= (uint16_t)(0.04096/(current_lsb*RSHUNT));
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <Set_16V_1A55+0xb0>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fb26 	bl	80004d0 <__aeabi_f2d>
 8000e84:	a31a      	add	r3, pc, #104	; (adr r3, 8000ef0 <Set_16V_1A55+0xa0>)
 8000e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8a:	f7ff fb79 	bl	8000580 <__aeabi_dmul>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	460c      	mov	r4, r1
 8000e92:	461a      	mov	r2, r3
 8000e94:	4623      	mov	r3, r4
 8000e96:	a118      	add	r1, pc, #96	; (adr r1, 8000ef8 <Set_16V_1A55+0xa8>)
 8000e98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e9c:	f7ff fc9a 	bl	80007d4 <__aeabi_ddiv>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	460c      	mov	r4, r1
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	4621      	mov	r1, r4
 8000ea8:	f7ff fd7c 	bl	80009a4 <__aeabi_d2uiz>
 8000eac:	4603      	mov	r3, r0
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <Set_16V_1A55+0xbc>)
 8000eb2:	801a      	strh	r2, [r3, #0]

	HAL_StatusTypeDef cal_stat 		= WriteRegister(device_address, INA219_REG_CAL, cal_reg);		// Program calibration register
 8000eb4:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <Set_16V_1A55+0xbc>)
 8000eb6:	881a      	ldrh	r2, [r3, #0]
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2105      	movs	r1, #5
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff9d 	bl	8000dfc <WriteRegister>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef conf_stat 	= WriteRegister(device_address, INA219_REG_CONFIG, config_reg);	// Set PGA gains and sampling modes in configuration register
 8000ec6:	89fa      	ldrh	r2, [r7, #14]
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff95 	bl	8000dfc <WriteRegister>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	733b      	strb	r3, [r7, #12]

	return (cal_stat == conf_stat) ? HAL_OK : HAL_ERROR;
 8000ed6:	7b7a      	ldrb	r2, [r7, #13]
 8000ed8:	7b3b      	ldrb	r3, [r7, #12]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	bf14      	ite	ne
 8000ede:	2301      	movne	r3, #1
 8000ee0:	2300      	moveq	r3, #0
 8000ee2:	b2db      	uxtb	r3, r3
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd90      	pop	{r4, r7, pc}
 8000eec:	f3af 8000 	nop.w
 8000ef0:	9999999a 	.word	0x9999999a
 8000ef4:	3fb99999 	.word	0x3fb99999
 8000ef8:	88e368f1 	.word	0x88e368f1
 8000efc:	3fa4f8b5 	.word	0x3fa4f8b5
 8000f00:	2000002c 	.word	0x2000002c
 8000f04:	38466666 	.word	0x38466666
 8000f08:	20000034 	.word	0x20000034
 8000f0c:	20000030 	.word	0x20000030

08000f10 <GetBusVoltage_V>:
/*
 * @brief Retrieves and processes raw bus voltage value from register.
 *
 * @return Bus votlage in Volts
 */
float GetBusVoltage_V(uint8_t device_address) {
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b087      	sub	sp, #28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
	uint16_t raw_bus_voltage;
	ReadRegister(device_address, INA219_REG_BUS_V, &raw_bus_voltage); // get raw bus voltage from INA219
 8000f1a:	f107 020e 	add.w	r2, r7, #14
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	2102      	movs	r1, #2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff3e 	bl	8000da4 <ReadRegister>

	raw_bus_voltage = raw_bus_voltage >> 3;					// bit shift 3 right to remove empty bit, CNVR, and OVF
 8000f28:	89fb      	ldrh	r3, [r7, #14]
 8000f2a:	08db      	lsrs	r3, r3, #3
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	81fb      	strh	r3, [r7, #14]
	int16_t bus_voltage_mV = (int16_t) raw_bus_voltage * 4; // *4mV (bus voltage LSB) to get actual bus voltage measured my device and convert to signed
 8000f30:	89fb      	ldrh	r3, [r7, #14]
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	82fb      	strh	r3, [r7, #22]
	float bus_voltage_V = (float)(bus_voltage_mV * 0.001);	// multiply by 0.001 to convert mV -> V
 8000f38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fab5 	bl	80004ac <__aeabi_i2d>
 8000f42:	a30b      	add	r3, pc, #44	; (adr r3, 8000f70 <GetBusVoltage_V+0x60>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	f7ff fb1a 	bl	8000580 <__aeabi_dmul>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	460c      	mov	r4, r1
 8000f50:	4618      	mov	r0, r3
 8000f52:	4621      	mov	r1, r4
 8000f54:	f7ff fd46 	bl	80009e4 <__aeabi_d2f>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	613b      	str	r3, [r7, #16]

	return bus_voltage_V;
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	ee07 3a90 	vmov	s15, r3
}
 8000f62:	eeb0 0a67 	vmov.f32	s0, s15
 8000f66:	371c      	adds	r7, #28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd90      	pop	{r4, r7, pc}
 8000f6c:	f3af 8000 	nop.w
 8000f70:	d2f1a9fc 	.word	0xd2f1a9fc
 8000f74:	3f50624d 	.word	0x3f50624d

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7c:	f000 fb26 	bl	80015cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f80:	f000 f814 	bl	8000fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f84:	f000 f92a 	bl	80011dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f88:	f000 f8fe 	bl	8001188 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f8c:	f000 f87c 	bl	8001088 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000f90:	f000 f8cc 	bl	800112c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  InitializeI2C(&hi2c1);
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <main+0x30>)
 8000f96:	f7ff fef5 	bl	8000d84 <InitializeI2C>
  Set_16V_1A55(INA219_ADDRESS_1);
 8000f9a:	2080      	movs	r0, #128	; 0x80
 8000f9c:	f7ff ff58 	bl	8000e50 <Set_16V_1A55>
  GetBusVoltage_V(INA219_ADDRESS_1);
 8000fa0:	2080      	movs	r0, #128	; 0x80
 8000fa2:	f7ff ffb5 	bl	8000f10 <GetBusVoltage_V>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <main+0x2e>
 8000fa8:	20000038 	.word	0x20000038

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b094      	sub	sp, #80	; 0x50
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	2234      	movs	r2, #52	; 0x34
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f003 f92e 	bl	800421c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <SystemClock_Config+0xd4>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	4a29      	ldr	r2, [pc, #164]	; (8001080 <SystemClock_Config+0xd4>)
 8000fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fde:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe0:	4b27      	ldr	r3, [pc, #156]	; (8001080 <SystemClock_Config+0xd4>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fec:	2300      	movs	r3, #0
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	4b24      	ldr	r3, [pc, #144]	; (8001084 <SystemClock_Config+0xd8>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ff8:	4a22      	ldr	r2, [pc, #136]	; (8001084 <SystemClock_Config+0xd8>)
 8000ffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	4b20      	ldr	r3, [pc, #128]	; (8001084 <SystemClock_Config+0xd8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800100c:	2302      	movs	r3, #2
 800100e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001010:	2301      	movs	r3, #1
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001014:	2310      	movs	r3, #16
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001018:	2302      	movs	r3, #2
 800101a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800101c:	2300      	movs	r3, #0
 800101e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001020:	2310      	movs	r3, #16
 8001022:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001024:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001028:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800102a:	2304      	movs	r3, #4
 800102c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800102e:	2302      	movs	r3, #2
 8001030:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001032:	2302      	movs	r3, #2
 8001034:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	4618      	mov	r0, r3
 800103c:	f002 faa6 	bl	800358c <HAL_RCC_OscConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001046:	f000 f94f 	bl	80012e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104a:	230f      	movs	r3, #15
 800104c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104e:	2302      	movs	r3, #2
 8001050:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001060:	f107 0308 	add.w	r3, r7, #8
 8001064:	2102      	movs	r1, #2
 8001066:	4618      	mov	r0, r3
 8001068:	f001 ffd6 	bl	8003018 <HAL_RCC_ClockConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001072:	f000 f939 	bl	80012e8 <Error_Handler>
  }
}
 8001076:	bf00      	nop
 8001078:	3750      	adds	r7, #80	; 0x50
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	40007000 	.word	0x40007000

08001088 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800108e:	463b      	mov	r3, r7
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800109a:	4b21      	ldr	r3, [pc, #132]	; (8001120 <MX_ADC1_Init+0x98>)
 800109c:	4a21      	ldr	r2, [pc, #132]	; (8001124 <MX_ADC1_Init+0x9c>)
 800109e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010a0:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <MX_ADC1_Init+0x98>)
 80010a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <MX_ADC1_Init+0x98>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <MX_ADC1_Init+0x98>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010b4:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_ADC1_Init+0x98>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <MX_ADC1_Init+0x98>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <MX_ADC1_Init+0x98>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c8:	4b15      	ldr	r3, [pc, #84]	; (8001120 <MX_ADC1_Init+0x98>)
 80010ca:	4a17      	ldr	r2, [pc, #92]	; (8001128 <MX_ADC1_Init+0xa0>)
 80010cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_ADC1_Init+0x98>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <MX_ADC1_Init+0x98>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_ADC1_Init+0x98>)
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_ADC1_Init+0x98>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e8:	480d      	ldr	r0, [pc, #52]	; (8001120 <MX_ADC1_Init+0x98>)
 80010ea:	f000 fae1 	bl	80016b0 <HAL_ADC_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010f4:	f000 f8f8 	bl	80012e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001104:	463b      	mov	r3, r7
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_ADC1_Init+0x98>)
 800110a:	f000 fb15 	bl	8001738 <HAL_ADC_ConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001114:	f000 f8e8 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	2000008c 	.word	0x2000008c
 8001124:	40012000 	.word	0x40012000
 8001128:	0f000001 	.word	0x0f000001

0800112c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_I2C1_Init+0x50>)
 8001132:	4a13      	ldr	r2, [pc, #76]	; (8001180 <MX_I2C1_Init+0x54>)
 8001134:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_I2C1_Init+0x50>)
 8001138:	4a12      	ldr	r2, [pc, #72]	; (8001184 <MX_I2C1_Init+0x58>)
 800113a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_I2C1_Init+0x50>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_I2C1_Init+0x50>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_I2C1_Init+0x50>)
 800114a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800114e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <MX_I2C1_Init+0x50>)
 8001152:	2200      	movs	r2, #0
 8001154:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_I2C1_Init+0x50>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <MX_I2C1_Init+0x50>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_I2C1_Init+0x50>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <MX_I2C1_Init+0x50>)
 800116a:	f000 ffa5 	bl	80020b8 <HAL_I2C_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001174:	f000 f8b8 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000038 	.word	0x20000038
 8001180:	40005400 	.word	0x40005400
 8001184:	000186a0 	.word	0x000186a0

08001188 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 800118e:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <MX_USART2_UART_Init+0x50>)
 8001190:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 8001194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001198:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011ae:	220c      	movs	r2, #12
 80011b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011be:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_USART2_UART_Init+0x4c>)
 80011c0:	f002 fc3e 	bl	8003a40 <HAL_UART_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ca:	f000 f88d 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200000d8 	.word	0x200000d8
 80011d8:	40004400 	.word	0x40004400

080011dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <MX_GPIO_Init+0xf8>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a36      	ldr	r2, [pc, #216]	; (80012d4 <MX_GPIO_Init+0xf8>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <MX_GPIO_Init+0xf8>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <MX_GPIO_Init+0xf8>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a2f      	ldr	r2, [pc, #188]	; (80012d4 <MX_GPIO_Init+0xf8>)
 8001218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <MX_GPIO_Init+0xf8>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <MX_GPIO_Init+0xf8>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a28      	ldr	r2, [pc, #160]	; (80012d4 <MX_GPIO_Init+0xf8>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <MX_GPIO_Init+0xf8>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <MX_GPIO_Init+0xf8>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <MX_GPIO_Init+0xf8>)
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <MX_GPIO_Init+0xf8>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	2120      	movs	r1, #32
 8001266:	481c      	ldr	r0, [pc, #112]	; (80012d8 <MX_GPIO_Init+0xfc>)
 8001268:	f000 ff0c 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCP3_Pin|SCP1_Pin|SCP2_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001272:	481a      	ldr	r0, [pc, #104]	; (80012dc <MX_GPIO_Init+0x100>)
 8001274:	f000 ff06 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001278:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800127c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <MX_GPIO_Init+0x104>)
 8001280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4815      	ldr	r0, [pc, #84]	; (80012e4 <MX_GPIO_Init+0x108>)
 800128e:	f000 fd67 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001292:	2320      	movs	r3, #32
 8001294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001296:	2301      	movs	r3, #1
 8001298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	480b      	ldr	r0, [pc, #44]	; (80012d8 <MX_GPIO_Init+0xfc>)
 80012aa:	f000 fd59 	bl	8001d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCP3_Pin SCP1_Pin SCP2_Pin */
  GPIO_InitStruct.Pin = SCP3_Pin|SCP1_Pin|SCP2_Pin;
 80012ae:	f44f 6383 	mov.w	r3, #1048	; 0x418
 80012b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_GPIO_Init+0x100>)
 80012c8:	f000 fd4a 	bl	8001d60 <HAL_GPIO_Init>

}
 80012cc:	bf00      	nop
 80012ce:	3728      	adds	r7, #40	; 0x28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020000 	.word	0x40020000
 80012dc:	40020400 	.word	0x40020400
 80012e0:	10210000 	.word	0x10210000
 80012e4:	40020800 	.word	0x40020800

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <HAL_MspInit+0x4c>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	4a0f      	ldr	r2, [pc, #60]	; (8001344 <HAL_MspInit+0x4c>)
 8001308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130c:	6453      	str	r3, [r2, #68]	; 0x44
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <HAL_MspInit+0x4c>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_MspInit+0x4c>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	4a08      	ldr	r2, [pc, #32]	; (8001344 <HAL_MspInit+0x4c>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001328:	6413      	str	r3, [r2, #64]	; 0x40
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_MspInit+0x4c>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001336:	2007      	movs	r0, #7
 8001338:	f000 fcde 	bl	8001cf8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800

08001348 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <HAL_ADC_MspInit+0x7c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d127      	bne.n	80013ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_ADC_MspInit+0x80>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	4a15      	ldr	r2, [pc, #84]	; (80013c8 <HAL_ADC_MspInit+0x80>)
 8001374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001378:	6453      	str	r3, [r2, #68]	; 0x44
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <HAL_ADC_MspInit+0x80>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_ADC_MspInit+0x80>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <HAL_ADC_MspInit+0x80>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <HAL_ADC_MspInit+0x80>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = NTC1_Pin|NTC2_Pin|NTC3_Pin;
 80013a2:	2313      	movs	r3, #19
 80013a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a6:	2303      	movs	r3, #3
 80013a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <HAL_ADC_MspInit+0x84>)
 80013b6:	f000 fcd3 	bl	8001d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40012000 	.word	0x40012000
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020000 	.word	0x40020000

080013d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a19      	ldr	r2, [pc, #100]	; (8001454 <HAL_I2C_MspInit+0x84>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d12c      	bne.n	800144c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <HAL_I2C_MspInit+0x88>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a17      	ldr	r2, [pc, #92]	; (8001458 <HAL_I2C_MspInit+0x88>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_I2C_MspInit+0x88>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800140e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001414:	2312      	movs	r3, #18
 8001416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001418:	2301      	movs	r3, #1
 800141a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001420:	2304      	movs	r3, #4
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	480c      	ldr	r0, [pc, #48]	; (800145c <HAL_I2C_MspInit+0x8c>)
 800142c:	f000 fc98 	bl	8001d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <HAL_I2C_MspInit+0x88>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_I2C_MspInit+0x88>)
 800143a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800143e:	6413      	str	r3, [r2, #64]	; 0x40
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_I2C_MspInit+0x88>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800144c:	bf00      	nop
 800144e:	3728      	adds	r7, #40	; 0x28
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40005400 	.word	0x40005400
 8001458:	40023800 	.word	0x40023800
 800145c:	40020400 	.word	0x40020400

08001460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <HAL_UART_MspInit+0x84>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d12b      	bne.n	80014da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <HAL_UART_MspInit+0x88>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <HAL_UART_MspInit+0x88>)
 800148c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001490:	6413      	str	r3, [r2, #64]	; 0x40
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_UART_MspInit+0x88>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_UART_MspInit+0x88>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <HAL_UART_MspInit+0x88>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <HAL_UART_MspInit+0x88>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014ba:	230c      	movs	r3, #12
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ca:	2307      	movs	r3, #7
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <HAL_UART_MspInit+0x8c>)
 80014d6:	f000 fc43 	bl	8001d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	; 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40004400 	.word	0x40004400
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020000 	.word	0x40020000

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <HardFault_Handler+0x4>

08001504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <MemManage_Handler+0x4>

0800150a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <BusFault_Handler+0x4>

08001510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <UsageFault_Handler+0x4>

08001516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001544:	f000 f894 	bl	8001670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}

0800154c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <SystemInit+0x28>)
 8001552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001556:	4a07      	ldr	r2, [pc, #28]	; (8001574 <SystemInit+0x28>)
 8001558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800155c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <SystemInit+0x28>)
 8001562:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001566:	609a      	str	r2, [r3, #8]
#endif
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800157c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800157e:	e003      	b.n	8001588 <LoopCopyDataInit>

08001580 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001582:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001584:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001586:	3104      	adds	r1, #4

08001588 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001588:	480b      	ldr	r0, [pc, #44]	; (80015b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800158c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800158e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001590:	d3f6      	bcc.n	8001580 <CopyDataInit>
  ldr  r2, =_sbss
 8001592:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001594:	e002      	b.n	800159c <LoopFillZerobss>

08001596 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001596:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001598:	f842 3b04 	str.w	r3, [r2], #4

0800159c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800159e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015a0:	d3f9      	bcc.n	8001596 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015a2:	f7ff ffd3 	bl	800154c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015a6:	f002 fe15 	bl	80041d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015aa:	f7ff fce5 	bl	8000f78 <main>
  bx  lr    
 80015ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80015b4:	0800426c 	.word	0x0800426c
  ldr  r0, =_sdata
 80015b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015bc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80015c0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80015c4:	2000011c 	.word	0x2000011c

080015c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <ADC_IRQHandler>
	...

080015cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d0:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_Init+0x40>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0d      	ldr	r2, [pc, #52]	; (800160c <HAL_Init+0x40>)
 80015d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_Init+0x40>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0a      	ldr	r2, [pc, #40]	; (800160c <HAL_Init+0x40>)
 80015e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_Init+0x40>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <HAL_Init+0x40>)
 80015ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f4:	2003      	movs	r0, #3
 80015f6:	f000 fb7f 	bl	8001cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f000 f808 	bl	8001610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001600:	f7ff fe7a 	bl	80012f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023c00 	.word	0x40023c00

08001610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_InitTick+0x54>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_InitTick+0x58>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001626:	fbb3 f3f1 	udiv	r3, r3, r1
 800162a:	fbb2 f3f3 	udiv	r3, r2, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f000 fb89 	bl	8001d46 <HAL_SYSTICK_Config>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e00e      	b.n	800165c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b0f      	cmp	r3, #15
 8001642:	d80a      	bhi.n	800165a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001644:	2200      	movs	r2, #0
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	f000 fb5f 	bl	8001d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001650:	4a06      	ldr	r2, [pc, #24]	; (800166c <HAL_InitTick+0x5c>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	e000      	b.n	800165c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000000 	.word	0x20000000
 8001668:	20000008 	.word	0x20000008
 800166c:	20000004 	.word	0x20000004

08001670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_IncTick+0x20>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_IncTick+0x24>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4413      	add	r3, r2
 8001680:	4a04      	ldr	r2, [pc, #16]	; (8001694 <HAL_IncTick+0x24>)
 8001682:	6013      	str	r3, [r2, #0]
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000008 	.word	0x20000008
 8001694:	20000118 	.word	0x20000118

08001698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return uwTick;
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <HAL_GetTick+0x14>)
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	20000118 	.word	0x20000118

080016b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e033      	b.n	800172e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d109      	bne.n	80016e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fe3a 	bl	8001348 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d118      	bne.n	8001720 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016f6:	f023 0302 	bic.w	r3, r3, #2
 80016fa:	f043 0202 	orr.w	r2, r3, #2
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f94a 	bl	800199c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f023 0303 	bic.w	r3, r3, #3
 8001716:	f043 0201 	orr.w	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	641a      	str	r2, [r3, #64]	; 0x40
 800171e:	e001      	b.n	8001724 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800172c:	7bfb      	ldrb	r3, [r7, #15]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800174c:	2b01      	cmp	r3, #1
 800174e:	d101      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x1c>
 8001750:	2302      	movs	r3, #2
 8001752:	e113      	b.n	800197c <HAL_ADC_ConfigChannel+0x244>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b09      	cmp	r3, #9
 8001762:	d925      	bls.n	80017b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68d9      	ldr	r1, [r3, #12]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	b29b      	uxth	r3, r3
 8001770:	461a      	mov	r2, r3
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	3b1e      	subs	r3, #30
 800177a:	2207      	movs	r2, #7
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43da      	mvns	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	400a      	ands	r2, r1
 8001788:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68d9      	ldr	r1, [r3, #12]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	b29b      	uxth	r3, r3
 800179a:	4618      	mov	r0, r3
 800179c:	4603      	mov	r3, r0
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4403      	add	r3, r0
 80017a2:	3b1e      	subs	r3, #30
 80017a4:	409a      	lsls	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	e022      	b.n	80017f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6919      	ldr	r1, [r3, #16]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	461a      	mov	r2, r3
 80017be:	4613      	mov	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	4413      	add	r3, r2
 80017c4:	2207      	movs	r2, #7
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43da      	mvns	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	400a      	ands	r2, r1
 80017d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6919      	ldr	r1, [r3, #16]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4618      	mov	r0, r3
 80017e6:	4603      	mov	r3, r0
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4403      	add	r3, r0
 80017ec:	409a      	lsls	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b06      	cmp	r3, #6
 80017fc:	d824      	bhi.n	8001848 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	3b05      	subs	r3, #5
 8001810:	221f      	movs	r2, #31
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43da      	mvns	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	400a      	ands	r2, r1
 800181e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	b29b      	uxth	r3, r3
 800182c:	4618      	mov	r0, r3
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	3b05      	subs	r3, #5
 800183a:	fa00 f203 	lsl.w	r2, r0, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	635a      	str	r2, [r3, #52]	; 0x34
 8001846:	e04c      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b0c      	cmp	r3, #12
 800184e:	d824      	bhi.n	800189a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	3b23      	subs	r3, #35	; 0x23
 8001862:	221f      	movs	r2, #31
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43da      	mvns	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	400a      	ands	r2, r1
 8001870:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	b29b      	uxth	r3, r3
 800187e:	4618      	mov	r0, r3
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	3b23      	subs	r3, #35	; 0x23
 800188c:	fa00 f203 	lsl.w	r2, r0, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	631a      	str	r2, [r3, #48]	; 0x30
 8001898:	e023      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	3b41      	subs	r3, #65	; 0x41
 80018ac:	221f      	movs	r2, #31
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43da      	mvns	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	400a      	ands	r2, r1
 80018ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	4618      	mov	r0, r3
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	3b41      	subs	r3, #65	; 0x41
 80018d6:	fa00 f203 	lsl.w	r2, r0, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018e2:	4b29      	ldr	r3, [pc, #164]	; (8001988 <HAL_ADC_ConfigChannel+0x250>)
 80018e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a28      	ldr	r2, [pc, #160]	; (800198c <HAL_ADC_ConfigChannel+0x254>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d10f      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x1d8>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b12      	cmp	r3, #18
 80018f6:	d10b      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a1d      	ldr	r2, [pc, #116]	; (800198c <HAL_ADC_ConfigChannel+0x254>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d12b      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x23a>
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a1c      	ldr	r2, [pc, #112]	; (8001990 <HAL_ADC_ConfigChannel+0x258>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d003      	beq.n	800192c <HAL_ADC_ConfigChannel+0x1f4>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b11      	cmp	r3, #17
 800192a:	d122      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a11      	ldr	r2, [pc, #68]	; (8001990 <HAL_ADC_ConfigChannel+0x258>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d111      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <HAL_ADC_ConfigChannel+0x25c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a11      	ldr	r2, [pc, #68]	; (8001998 <HAL_ADC_ConfigChannel+0x260>)
 8001954:	fba2 2303 	umull	r2, r3, r2, r3
 8001958:	0c9a      	lsrs	r2, r3, #18
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001964:	e002      	b.n	800196c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	3b01      	subs	r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f9      	bne.n	8001966 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	40012300 	.word	0x40012300
 800198c:	40012000 	.word	0x40012000
 8001990:	10000012 	.word	0x10000012
 8001994:	20000000 	.word	0x20000000
 8001998:	431bde83 	.word	0x431bde83

0800199c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019a4:	4b79      	ldr	r3, [pc, #484]	; (8001b8c <ADC_Init+0x1f0>)
 80019a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	431a      	orrs	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6859      	ldr	r1, [r3, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	021a      	lsls	r2, r3, #8
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6859      	ldr	r1, [r3, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6899      	ldr	r1, [r3, #8]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2e:	4a58      	ldr	r2, [pc, #352]	; (8001b90 <ADC_Init+0x1f4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d022      	beq.n	8001a7a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6899      	ldr	r1, [r3, #8]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6899      	ldr	r1, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	e00f      	b.n	8001a9a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a98:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0202 	bic.w	r2, r2, #2
 8001aa8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6899      	ldr	r1, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7e1b      	ldrb	r3, [r3, #24]
 8001ab4:	005a      	lsls	r2, r3, #1
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01b      	beq.n	8001b00 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ad6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ae6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6859      	ldr	r1, [r3, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	3b01      	subs	r3, #1
 8001af4:	035a      	lsls	r2, r3, #13
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	e007      	b.n	8001b10 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	051a      	lsls	r2, r3, #20
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6899      	ldr	r1, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b52:	025a      	lsls	r2, r3, #9
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6899      	ldr	r1, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	029a      	lsls	r2, r3, #10
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	609a      	str	r2, [r3, #8]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	40012300 	.word	0x40012300
 8001b90:	0f000001 	.word	0x0f000001

08001b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc6:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 0307 	and.w	r3, r3, #7
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	db0a      	blt.n	8001c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	490c      	ldr	r1, [pc, #48]	; (8001c44 <__NVIC_SetPriority+0x4c>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	0112      	lsls	r2, r2, #4
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c20:	e00a      	b.n	8001c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4908      	ldr	r1, [pc, #32]	; (8001c48 <__NVIC_SetPriority+0x50>)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	3b04      	subs	r3, #4
 8001c30:	0112      	lsls	r2, r2, #4
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	440b      	add	r3, r1
 8001c36:	761a      	strb	r2, [r3, #24]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000e100 	.word	0xe000e100
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	; 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f1c3 0307 	rsb	r3, r3, #7
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	bf28      	it	cs
 8001c6a:	2304      	movcs	r3, #4
 8001c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3304      	adds	r3, #4
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d902      	bls.n	8001c7c <NVIC_EncodePriority+0x30>
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3b03      	subs	r3, #3
 8001c7a:	e000      	b.n	8001c7e <NVIC_EncodePriority+0x32>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	401a      	ands	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c94:	f04f 31ff 	mov.w	r1, #4294967295
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43d9      	mvns	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	4313      	orrs	r3, r2
         );
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3724      	adds	r7, #36	; 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cc4:	d301      	bcc.n	8001cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e00f      	b.n	8001cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <SysTick_Config+0x40>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f7ff ff8e 	bl	8001bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <SysTick_Config+0x40>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <SysTick_Config+0x40>)
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	e000e010 	.word	0xe000e010

08001cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ff47 	bl	8001b94 <__NVIC_SetPriorityGrouping>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b086      	sub	sp, #24
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d20:	f7ff ff5c 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8001d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	6978      	ldr	r0, [r7, #20]
 8001d2c:	f7ff ff8e 	bl	8001c4c <NVIC_EncodePriority>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff5d 	bl	8001bf8 <__NVIC_SetPriority>
}
 8001d3e:	bf00      	nop
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ffb0 	bl	8001cb4 <SysTick_Config>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b089      	sub	sp, #36	; 0x24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	e165      	b.n	8002048 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	f040 8154 	bne.w	8002042 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d00b      	beq.n	8001dba <HAL_GPIO_Init+0x5a>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d007      	beq.n	8001dba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dae:	2b11      	cmp	r3, #17
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b12      	cmp	r3, #18
 8001db8:	d130      	bne.n	8001e1c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001df0:	2201      	movs	r2, #1
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	f003 0201 	and.w	r2, r3, #1
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0xfc>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b12      	cmp	r3, #18
 8001e5a:	d123      	bne.n	8001ea4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	08da      	lsrs	r2, r3, #3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3208      	adds	r2, #8
 8001e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	220f      	movs	r2, #15
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	08da      	lsrs	r2, r3, #3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3208      	adds	r2, #8
 8001e9e:	69b9      	ldr	r1, [r7, #24]
 8001ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	2203      	movs	r2, #3
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0203 	and.w	r2, r3, #3
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 80ae 	beq.w	8002042 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	4b5c      	ldr	r3, [pc, #368]	; (800205c <HAL_GPIO_Init+0x2fc>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	4a5b      	ldr	r2, [pc, #364]	; (800205c <HAL_GPIO_Init+0x2fc>)
 8001ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef6:	4b59      	ldr	r3, [pc, #356]	; (800205c <HAL_GPIO_Init+0x2fc>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f02:	4a57      	ldr	r2, [pc, #348]	; (8002060 <HAL_GPIO_Init+0x300>)
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	3302      	adds	r3, #2
 8001f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	220f      	movs	r2, #15
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4e      	ldr	r2, [pc, #312]	; (8002064 <HAL_GPIO_Init+0x304>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d025      	beq.n	8001f7a <HAL_GPIO_Init+0x21a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4d      	ldr	r2, [pc, #308]	; (8002068 <HAL_GPIO_Init+0x308>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d01f      	beq.n	8001f76 <HAL_GPIO_Init+0x216>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4c      	ldr	r2, [pc, #304]	; (800206c <HAL_GPIO_Init+0x30c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d019      	beq.n	8001f72 <HAL_GPIO_Init+0x212>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4b      	ldr	r2, [pc, #300]	; (8002070 <HAL_GPIO_Init+0x310>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <HAL_GPIO_Init+0x20e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4a      	ldr	r2, [pc, #296]	; (8002074 <HAL_GPIO_Init+0x314>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00d      	beq.n	8001f6a <HAL_GPIO_Init+0x20a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a49      	ldr	r2, [pc, #292]	; (8002078 <HAL_GPIO_Init+0x318>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d007      	beq.n	8001f66 <HAL_GPIO_Init+0x206>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a48      	ldr	r2, [pc, #288]	; (800207c <HAL_GPIO_Init+0x31c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d101      	bne.n	8001f62 <HAL_GPIO_Init+0x202>
 8001f5e:	2306      	movs	r3, #6
 8001f60:	e00c      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f62:	2307      	movs	r3, #7
 8001f64:	e00a      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f66:	2305      	movs	r3, #5
 8001f68:	e008      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	e006      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e004      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e002      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_GPIO_Init+0x21c>
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	69fa      	ldr	r2, [r7, #28]
 8001f7e:	f002 0203 	and.w	r2, r2, #3
 8001f82:	0092      	lsls	r2, r2, #2
 8001f84:	4093      	lsls	r3, r2
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f8c:	4934      	ldr	r1, [pc, #208]	; (8002060 <HAL_GPIO_Init+0x300>)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	3302      	adds	r3, #2
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f9a:	4b39      	ldr	r3, [pc, #228]	; (8002080 <HAL_GPIO_Init+0x320>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fbe:	4a30      	ldr	r2, [pc, #192]	; (8002080 <HAL_GPIO_Init+0x320>)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fc4:	4b2e      	ldr	r3, [pc, #184]	; (8002080 <HAL_GPIO_Init+0x320>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fe8:	4a25      	ldr	r2, [pc, #148]	; (8002080 <HAL_GPIO_Init+0x320>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fee:	4b24      	ldr	r3, [pc, #144]	; (8002080 <HAL_GPIO_Init+0x320>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002012:	4a1b      	ldr	r2, [pc, #108]	; (8002080 <HAL_GPIO_Init+0x320>)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_GPIO_Init+0x320>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800203c:	4a10      	ldr	r2, [pc, #64]	; (8002080 <HAL_GPIO_Init+0x320>)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3301      	adds	r3, #1
 8002046:	61fb      	str	r3, [r7, #28]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	2b0f      	cmp	r3, #15
 800204c:	f67f ae96 	bls.w	8001d7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002050:	bf00      	nop
 8002052:	3724      	adds	r7, #36	; 0x24
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	40023800 	.word	0x40023800
 8002060:	40013800 	.word	0x40013800
 8002064:	40020000 	.word	0x40020000
 8002068:	40020400 	.word	0x40020400
 800206c:	40020800 	.word	0x40020800
 8002070:	40020c00 	.word	0x40020c00
 8002074:	40021000 	.word	0x40021000
 8002078:	40021400 	.word	0x40021400
 800207c:	40021800 	.word	0x40021800
 8002080:	40013c00 	.word	0x40013c00

08002084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
 8002090:	4613      	mov	r3, r2
 8002092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002094:	787b      	ldrb	r3, [r7, #1]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800209a:	887a      	ldrh	r2, [r7, #2]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020a0:	e003      	b.n	80020aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020a2:	887b      	ldrh	r3, [r7, #2]
 80020a4:	041a      	lsls	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	619a      	str	r2, [r3, #24]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e11f      	b.n	800230a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff f976 	bl	80013d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2224      	movs	r2, #36	; 0x24
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0201 	bic.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800210a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800211a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800211c:	f001 f86e 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8002120:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4a7b      	ldr	r2, [pc, #492]	; (8002314 <HAL_I2C_Init+0x25c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d807      	bhi.n	800213c <HAL_I2C_Init+0x84>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4a7a      	ldr	r2, [pc, #488]	; (8002318 <HAL_I2C_Init+0x260>)
 8002130:	4293      	cmp	r3, r2
 8002132:	bf94      	ite	ls
 8002134:	2301      	movls	r3, #1
 8002136:	2300      	movhi	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	e006      	b.n	800214a <HAL_I2C_Init+0x92>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4a77      	ldr	r2, [pc, #476]	; (800231c <HAL_I2C_Init+0x264>)
 8002140:	4293      	cmp	r3, r2
 8002142:	bf94      	ite	ls
 8002144:	2301      	movls	r3, #1
 8002146:	2300      	movhi	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e0db      	b.n	800230a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4a72      	ldr	r2, [pc, #456]	; (8002320 <HAL_I2C_Init+0x268>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	0c9b      	lsrs	r3, r3, #18
 800215c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	430a      	orrs	r2, r1
 8002170:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4a64      	ldr	r2, [pc, #400]	; (8002314 <HAL_I2C_Init+0x25c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d802      	bhi.n	800218c <HAL_I2C_Init+0xd4>
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	3301      	adds	r3, #1
 800218a:	e009      	b.n	80021a0 <HAL_I2C_Init+0xe8>
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002192:	fb02 f303 	mul.w	r3, r2, r3
 8002196:	4a63      	ldr	r2, [pc, #396]	; (8002324 <HAL_I2C_Init+0x26c>)
 8002198:	fba2 2303 	umull	r2, r3, r2, r3
 800219c:	099b      	lsrs	r3, r3, #6
 800219e:	3301      	adds	r3, #1
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	430b      	orrs	r3, r1
 80021a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4956      	ldr	r1, [pc, #344]	; (8002314 <HAL_I2C_Init+0x25c>)
 80021bc:	428b      	cmp	r3, r1
 80021be:	d80d      	bhi.n	80021dc <HAL_I2C_Init+0x124>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ce:	3301      	adds	r3, #1
 80021d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	bf38      	it	cc
 80021d8:	2304      	movcc	r3, #4
 80021da:	e04f      	b.n	800227c <HAL_I2C_Init+0x1c4>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d111      	bne.n	8002208 <HAL_I2C_Init+0x150>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1e58      	subs	r0, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	440b      	add	r3, r1
 80021f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f6:	3301      	adds	r3, #1
 80021f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	e012      	b.n	800222e <HAL_I2C_Init+0x176>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	1e58      	subs	r0, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6859      	ldr	r1, [r3, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	0099      	lsls	r1, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	fbb0 f3f3 	udiv	r3, r0, r3
 800221e:	3301      	adds	r3, #1
 8002220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002224:	2b00      	cmp	r3, #0
 8002226:	bf0c      	ite	eq
 8002228:	2301      	moveq	r3, #1
 800222a:	2300      	movne	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_I2C_Init+0x17e>
 8002232:	2301      	movs	r3, #1
 8002234:	e022      	b.n	800227c <HAL_I2C_Init+0x1c4>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10e      	bne.n	800225c <HAL_I2C_Init+0x1a4>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1e58      	subs	r0, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6859      	ldr	r1, [r3, #4]
 8002246:	460b      	mov	r3, r1
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	440b      	add	r3, r1
 800224c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002250:	3301      	adds	r3, #1
 8002252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800225a:	e00f      	b.n	800227c <HAL_I2C_Init+0x1c4>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	1e58      	subs	r0, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6859      	ldr	r1, [r3, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	0099      	lsls	r1, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002272:	3301      	adds	r3, #1
 8002274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002278:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	6809      	ldr	r1, [r1, #0]
 8002280:	4313      	orrs	r3, r2
 8002282:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69da      	ldr	r2, [r3, #28]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6911      	ldr	r1, [r2, #16]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68d2      	ldr	r2, [r2, #12]
 80022b6:	4311      	orrs	r1, r2
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	430b      	orrs	r3, r1
 80022be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2220      	movs	r2, #32
 80022f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	000186a0 	.word	0x000186a0
 8002318:	001e847f 	.word	0x001e847f
 800231c:	003d08ff 	.word	0x003d08ff
 8002320:	431bde83 	.word	0x431bde83
 8002324:	10624dd3 	.word	0x10624dd3

08002328 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af02      	add	r7, sp, #8
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	4608      	mov	r0, r1
 8002332:	4611      	mov	r1, r2
 8002334:	461a      	mov	r2, r3
 8002336:	4603      	mov	r3, r0
 8002338:	817b      	strh	r3, [r7, #10]
 800233a:	460b      	mov	r3, r1
 800233c:	813b      	strh	r3, [r7, #8]
 800233e:	4613      	mov	r3, r2
 8002340:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002342:	f7ff f9a9 	bl	8001698 <HAL_GetTick>
 8002346:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b20      	cmp	r3, #32
 8002352:	f040 80d9 	bne.w	8002508 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	2319      	movs	r3, #25
 800235c:	2201      	movs	r2, #1
 800235e:	496d      	ldr	r1, [pc, #436]	; (8002514 <HAL_I2C_Mem_Write+0x1ec>)
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 fc7b 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800236c:	2302      	movs	r3, #2
 800236e:	e0cc      	b.n	800250a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_I2C_Mem_Write+0x56>
 800237a:	2302      	movs	r3, #2
 800237c:	e0c5      	b.n	800250a <HAL_I2C_Mem_Write+0x1e2>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b01      	cmp	r3, #1
 8002392:	d007      	beq.n	80023a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2221      	movs	r2, #33	; 0x21
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2240      	movs	r2, #64	; 0x40
 80023c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a3a      	ldr	r2, [r7, #32]
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4a4d      	ldr	r2, [pc, #308]	; (8002518 <HAL_I2C_Mem_Write+0x1f0>)
 80023e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023e6:	88f8      	ldrh	r0, [r7, #6]
 80023e8:	893a      	ldrh	r2, [r7, #8]
 80023ea:	8979      	ldrh	r1, [r7, #10]
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	9301      	str	r3, [sp, #4]
 80023f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	4603      	mov	r3, r0
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 fab6 	bl	8002968 <I2C_RequestMemoryWrite>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d052      	beq.n	80024a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e081      	b.n	800250a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 fcfc 	bl	8002e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00d      	beq.n	8002432 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	2b04      	cmp	r3, #4
 800241c:	d107      	bne.n	800242e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800242c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e06b      	b.n	800250a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	781a      	ldrb	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244c:	3b01      	subs	r3, #1
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002458:	b29b      	uxth	r3, r3
 800245a:	3b01      	subs	r3, #1
 800245c:	b29a      	uxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b04      	cmp	r3, #4
 800246e:	d11b      	bne.n	80024a8 <HAL_I2C_Mem_Write+0x180>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002474:	2b00      	cmp	r3, #0
 8002476:	d017      	beq.n	80024a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	781a      	ldrb	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1aa      	bne.n	8002406 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 fce8 	bl	8002e8a <I2C_WaitOnBTFFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00d      	beq.n	80024dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d107      	bne.n	80024d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e016      	b.n	800250a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	e000      	b.n	800250a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002508:	2302      	movs	r3, #2
  }
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	00100002 	.word	0x00100002
 8002518:	ffff0000 	.word	0xffff0000

0800251c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08c      	sub	sp, #48	; 0x30
 8002520:	af02      	add	r7, sp, #8
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	4608      	mov	r0, r1
 8002526:	4611      	mov	r1, r2
 8002528:	461a      	mov	r2, r3
 800252a:	4603      	mov	r3, r0
 800252c:	817b      	strh	r3, [r7, #10]
 800252e:	460b      	mov	r3, r1
 8002530:	813b      	strh	r3, [r7, #8]
 8002532:	4613      	mov	r3, r2
 8002534:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002536:	f7ff f8af 	bl	8001698 <HAL_GetTick>
 800253a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b20      	cmp	r3, #32
 8002546:	f040 8208 	bne.w	800295a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	2319      	movs	r3, #25
 8002550:	2201      	movs	r2, #1
 8002552:	497b      	ldr	r1, [pc, #492]	; (8002740 <HAL_I2C_Mem_Read+0x224>)
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fb81 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002560:	2302      	movs	r3, #2
 8002562:	e1fb      	b.n	800295c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_I2C_Mem_Read+0x56>
 800256e:	2302      	movs	r3, #2
 8002570:	e1f4      	b.n	800295c <HAL_I2C_Mem_Read+0x440>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b01      	cmp	r3, #1
 8002586:	d007      	beq.n	8002598 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2222      	movs	r2, #34	; 0x22
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2240      	movs	r2, #64	; 0x40
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80025c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4a5b      	ldr	r2, [pc, #364]	; (8002744 <HAL_I2C_Mem_Read+0x228>)
 80025d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025da:	88f8      	ldrh	r0, [r7, #6]
 80025dc:	893a      	ldrh	r2, [r7, #8]
 80025de:	8979      	ldrh	r1, [r7, #10]
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	9301      	str	r3, [sp, #4]
 80025e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	4603      	mov	r3, r0
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 fa50 	bl	8002a90 <I2C_RequestMemoryRead>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e1b0      	b.n	800295c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d113      	bne.n	800262a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002602:	2300      	movs	r3, #0
 8002604:	623b      	str	r3, [r7, #32]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	623b      	str	r3, [r7, #32]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	623b      	str	r3, [r7, #32]
 8002616:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e184      	b.n	8002934 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262e:	2b01      	cmp	r3, #1
 8002630:	d11b      	bne.n	800266a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002640:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	61fb      	str	r3, [r7, #28]
 8002656:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	e164      	b.n	8002934 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266e:	2b02      	cmp	r3, #2
 8002670:	d11b      	bne.n	80026aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002680:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002690:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	e144      	b.n	8002934 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80026c0:	e138      	b.n	8002934 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	f200 80f1 	bhi.w	80028ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d123      	bne.n	800271c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 fc17 	bl	8002f0c <I2C_WaitOnRXNEFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e139      	b.n	800295c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002704:	3b01      	subs	r3, #1
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	855a      	strh	r2, [r3, #42]	; 0x2a
 800271a:	e10b      	b.n	8002934 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002720:	2b02      	cmp	r3, #2
 8002722:	d14e      	bne.n	80027c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272a:	2200      	movs	r2, #0
 800272c:	4906      	ldr	r1, [pc, #24]	; (8002748 <HAL_I2C_Mem_Read+0x22c>)
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 fa94 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d008      	beq.n	800274c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e10e      	b.n	800295c <HAL_I2C_Mem_Read+0x440>
 800273e:	bf00      	nop
 8002740:	00100002 	.word	0x00100002
 8002744:	ffff0000 	.word	0xffff0000
 8002748:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691a      	ldr	r2, [r3, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027c0:	e0b8      	b.n	8002934 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c8:	2200      	movs	r2, #0
 80027ca:	4966      	ldr	r1, [pc, #408]	; (8002964 <HAL_I2C_Mem_Read+0x448>)
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 fa45 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0bf      	b.n	800295c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002824:	2200      	movs	r2, #0
 8002826:	494f      	ldr	r1, [pc, #316]	; (8002964 <HAL_I2C_Mem_Read+0x448>)
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 fa17 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e091      	b.n	800295c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002846:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028ac:	e042      	b.n	8002934 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fb2a 	bl	8002f0c <I2C_WaitOnRXNEFlagUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e04c      	b.n	800295c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d118      	bne.n	8002934 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292a:	b29b      	uxth	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002938:	2b00      	cmp	r3, #0
 800293a:	f47f aec2 	bne.w	80026c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	e000      	b.n	800295c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800295a:	2302      	movs	r3, #2
  }
}
 800295c:	4618      	mov	r0, r3
 800295e:	3728      	adds	r7, #40	; 0x28
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	00010004 	.word	0x00010004

08002968 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	4608      	mov	r0, r1
 8002972:	4611      	mov	r1, r2
 8002974:	461a      	mov	r2, r3
 8002976:	4603      	mov	r3, r0
 8002978:	817b      	strh	r3, [r7, #10]
 800297a:	460b      	mov	r3, r1
 800297c:	813b      	strh	r3, [r7, #8]
 800297e:	4613      	mov	r3, r2
 8002980:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002990:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	2200      	movs	r2, #0
 800299a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f95c 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00c      	beq.n	80029c4 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e05f      	b.n	8002a84 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029c4:	897b      	ldrh	r3, [r7, #10]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	461a      	mov	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	6a3a      	ldr	r2, [r7, #32]
 80029d8:	492c      	ldr	r1, [pc, #176]	; (8002a8c <I2C_RequestMemoryWrite+0x124>)
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f995 	bl	8002d0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e04c      	b.n	8002a84 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a02:	6a39      	ldr	r1, [r7, #32]
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f9ff 	bl	8002e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00d      	beq.n	8002a2c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d107      	bne.n	8002a28 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e02b      	b.n	8002a84 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d105      	bne.n	8002a3e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a32:	893b      	ldrh	r3, [r7, #8]
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	611a      	str	r2, [r3, #16]
 8002a3c:	e021      	b.n	8002a82 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a3e:	893b      	ldrh	r3, [r7, #8]
 8002a40:	0a1b      	lsrs	r3, r3, #8
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4e:	6a39      	ldr	r1, [r7, #32]
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f9d9 	bl	8002e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00d      	beq.n	8002a78 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d107      	bne.n	8002a74 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e005      	b.n	8002a84 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a78:	893b      	ldrh	r3, [r7, #8]
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	00010002 	.word	0x00010002

08002a90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	4608      	mov	r0, r1
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	817b      	strh	r3, [r7, #10]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	813b      	strh	r3, [r7, #8]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ab8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 f8c0 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00c      	beq.n	8002afc <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e0a9      	b.n	8002c50 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002afc:	897b      	ldrh	r3, [r7, #10]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	461a      	mov	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	6a3a      	ldr	r2, [r7, #32]
 8002b10:	4951      	ldr	r1, [pc, #324]	; (8002c58 <I2C_RequestMemoryRead+0x1c8>)
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 f8f9 	bl	8002d0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e096      	b.n	8002c50 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3a:	6a39      	ldr	r1, [r7, #32]
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f963 	bl	8002e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00d      	beq.n	8002b64 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d107      	bne.n	8002b60 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b5e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e075      	b.n	8002c50 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d105      	bne.n	8002b76 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b6a:	893b      	ldrh	r3, [r7, #8]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	611a      	str	r2, [r3, #16]
 8002b74:	e021      	b.n	8002bba <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	0a1b      	lsrs	r3, r3, #8
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b86:	6a39      	ldr	r1, [r7, #32]
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f93d 	bl	8002e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00d      	beq.n	8002bb0 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d107      	bne.n	8002bac <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002baa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e04f      	b.n	8002c50 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bb0:	893b      	ldrh	r3, [r7, #8]
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bbc:	6a39      	ldr	r1, [r7, #32]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f922 	bl	8002e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00d      	beq.n	8002be6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d107      	bne.n	8002be2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e034      	b.n	8002c50 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f82a 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00c      	beq.n	8002c28 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e013      	b.n	8002c50 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c28:	897b      	ldrh	r3, [r7, #10]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	6a3a      	ldr	r2, [r7, #32]
 8002c3c:	4906      	ldr	r1, [pc, #24]	; (8002c58 <I2C_RequestMemoryRead+0x1c8>)
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f863 	bl	8002d0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	00010002 	.word	0x00010002

08002c5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c6c:	e025      	b.n	8002cba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c74:	d021      	beq.n	8002cba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c76:	f7fe fd0f 	bl	8001698 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d302      	bcc.n	8002c8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d116      	bne.n	8002cba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f043 0220 	orr.w	r2, r3, #32
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e023      	b.n	8002d02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	0c1b      	lsrs	r3, r3, #16
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d10d      	bne.n	8002ce0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	43da      	mvns	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	bf0c      	ite	eq
 8002cd6:	2301      	moveq	r3, #1
 8002cd8:	2300      	movne	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	e00c      	b.n	8002cfa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	43da      	mvns	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4013      	ands	r3, r2
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	bf0c      	ite	eq
 8002cf2:	2301      	moveq	r3, #1
 8002cf4:	2300      	movne	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d0b6      	beq.n	8002c6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	607a      	str	r2, [r7, #4]
 8002d16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d18:	e051      	b.n	8002dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d28:	d123      	bne.n	8002d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	f043 0204 	orr.w	r2, r3, #4
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e046      	b.n	8002e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d78:	d021      	beq.n	8002dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7a:	f7fe fc8d 	bl	8001698 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d302      	bcc.n	8002d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d116      	bne.n	8002dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f043 0220 	orr.w	r2, r3, #32
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e020      	b.n	8002e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d10c      	bne.n	8002de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	bf14      	ite	ne
 8002dda:	2301      	movne	r3, #1
 8002ddc:	2300      	moveq	r3, #0
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	e00b      	b.n	8002dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	43da      	mvns	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	4013      	ands	r3, r2
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	bf14      	ite	ne
 8002df4:	2301      	movne	r3, #1
 8002df6:	2300      	moveq	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d18d      	bne.n	8002d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e14:	e02d      	b.n	8002e72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f8ce 	bl	8002fb8 <I2C_IsAcknowledgeFailed>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e02d      	b.n	8002e82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2c:	d021      	beq.n	8002e72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2e:	f7fe fc33 	bl	8001698 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d302      	bcc.n	8002e44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d116      	bne.n	8002e72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f043 0220 	orr.w	r2, r3, #32
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e007      	b.n	8002e82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7c:	2b80      	cmp	r3, #128	; 0x80
 8002e7e:	d1ca      	bne.n	8002e16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b084      	sub	sp, #16
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e96:	e02d      	b.n	8002ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 f88d 	bl	8002fb8 <I2C_IsAcknowledgeFailed>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e02d      	b.n	8002f04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eae:	d021      	beq.n	8002ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb0:	f7fe fbf2 	bl	8001698 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d302      	bcc.n	8002ec6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d116      	bne.n	8002ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f043 0220 	orr.w	r2, r3, #32
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e007      	b.n	8002f04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d1ca      	bne.n	8002e98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f18:	e042      	b.n	8002fa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b10      	cmp	r3, #16
 8002f26:	d119      	bne.n	8002f5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0210 	mvn.w	r2, #16
 8002f30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e029      	b.n	8002fb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5c:	f7fe fb9c 	bl	8001698 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d302      	bcc.n	8002f72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d116      	bne.n	8002fa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	f043 0220 	orr.w	r2, r3, #32
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e007      	b.n	8002fb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002faa:	2b40      	cmp	r3, #64	; 0x40
 8002fac:	d1b5      	bne.n	8002f1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fce:	d11b      	bne.n	8003008 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	f043 0204 	orr.w	r2, r3, #4
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
	...

08003018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0cc      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800302c:	4b68      	ldr	r3, [pc, #416]	; (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 030f 	and.w	r3, r3, #15
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d90c      	bls.n	8003054 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303a:	4b65      	ldr	r3, [pc, #404]	; (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003042:	4b63      	ldr	r3, [pc, #396]	; (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0b8      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d020      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800306c:	4b59      	ldr	r3, [pc, #356]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4a58      	ldr	r2, [pc, #352]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003076:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003084:	4b53      	ldr	r3, [pc, #332]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	4a52      	ldr	r2, [pc, #328]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800308e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003090:	4b50      	ldr	r3, [pc, #320]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	494d      	ldr	r1, [pc, #308]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d044      	beq.n	8003138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d107      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b6:	4b47      	ldr	r3, [pc, #284]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d119      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e07f      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d003      	beq.n	80030d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d107      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d6:	4b3f      	ldr	r3, [pc, #252]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d109      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e06f      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e6:	4b3b      	ldr	r3, [pc, #236]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e067      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030f6:	4b37      	ldr	r3, [pc, #220]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f023 0203 	bic.w	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	4934      	ldr	r1, [pc, #208]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003104:	4313      	orrs	r3, r2
 8003106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003108:	f7fe fac6 	bl	8001698 <HAL_GetTick>
 800310c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310e:	e00a      	b.n	8003126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003110:	f7fe fac2 	bl	8001698 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	f241 3288 	movw	r2, #5000	; 0x1388
 800311e:	4293      	cmp	r3, r2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e04f      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003126:	4b2b      	ldr	r3, [pc, #172]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 020c 	and.w	r2, r3, #12
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	429a      	cmp	r2, r3
 8003136:	d1eb      	bne.n	8003110 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003138:	4b25      	ldr	r3, [pc, #148]	; (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d20c      	bcs.n	8003160 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003146:	4b22      	ldr	r3, [pc, #136]	; (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800314e:	4b20      	ldr	r3, [pc, #128]	; (80031d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d001      	beq.n	8003160 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e032      	b.n	80031c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800316c:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	4916      	ldr	r1, [pc, #88]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	4313      	orrs	r3, r2
 800317c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d009      	beq.n	800319e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800318a:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	490e      	ldr	r1, [pc, #56]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	4313      	orrs	r3, r2
 800319c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800319e:	f000 f855 	bl	800324c <HAL_RCC_GetSysClockFreq>
 80031a2:	4601      	mov	r1, r0
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	091b      	lsrs	r3, r3, #4
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	4a0a      	ldr	r2, [pc, #40]	; (80031d8 <HAL_RCC_ClockConfig+0x1c0>)
 80031b0:	5cd3      	ldrb	r3, [r2, r3]
 80031b2:	fa21 f303 	lsr.w	r3, r1, r3
 80031b6:	4a09      	ldr	r2, [pc, #36]	; (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 80031b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <HAL_RCC_ClockConfig+0x1c8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fe fa26 	bl	8001610 <HAL_InitTick>

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40023c00 	.word	0x40023c00
 80031d4:	40023800 	.word	0x40023800
 80031d8:	08004244 	.word	0x08004244
 80031dc:	20000000 	.word	0x20000000
 80031e0:	20000004 	.word	0x20000004

080031e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e8:	4b03      	ldr	r3, [pc, #12]	; (80031f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ea:	681b      	ldr	r3, [r3, #0]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20000000 	.word	0x20000000

080031fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003200:	f7ff fff0 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8003204:	4601      	mov	r1, r0
 8003206:	4b05      	ldr	r3, [pc, #20]	; (800321c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	0a9b      	lsrs	r3, r3, #10
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	4a03      	ldr	r2, [pc, #12]	; (8003220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003212:	5cd3      	ldrb	r3, [r2, r3]
 8003214:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40023800 	.word	0x40023800
 8003220:	08004254 	.word	0x08004254

08003224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003228:	f7ff ffdc 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 800322c:	4601      	mov	r1, r0
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	0b5b      	lsrs	r3, r3, #13
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	4a03      	ldr	r2, [pc, #12]	; (8003248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800323a:	5cd3      	ldrb	r3, [r2, r3]
 800323c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003240:	4618      	mov	r0, r3
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40023800 	.word	0x40023800
 8003248:	08004254 	.word	0x08004254

0800324c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800324c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003266:	4bc6      	ldr	r3, [pc, #792]	; (8003580 <HAL_RCC_GetSysClockFreq+0x334>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b0c      	cmp	r3, #12
 8003270:	f200 817e 	bhi.w	8003570 <HAL_RCC_GetSysClockFreq+0x324>
 8003274:	a201      	add	r2, pc, #4	; (adr r2, 800327c <HAL_RCC_GetSysClockFreq+0x30>)
 8003276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327a:	bf00      	nop
 800327c:	080032b1 	.word	0x080032b1
 8003280:	08003571 	.word	0x08003571
 8003284:	08003571 	.word	0x08003571
 8003288:	08003571 	.word	0x08003571
 800328c:	080032b7 	.word	0x080032b7
 8003290:	08003571 	.word	0x08003571
 8003294:	08003571 	.word	0x08003571
 8003298:	08003571 	.word	0x08003571
 800329c:	080032bd 	.word	0x080032bd
 80032a0:	08003571 	.word	0x08003571
 80032a4:	08003571 	.word	0x08003571
 80032a8:	08003571 	.word	0x08003571
 80032ac:	08003419 	.word	0x08003419
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032b0:	4bb4      	ldr	r3, [pc, #720]	; (8003584 <HAL_RCC_GetSysClockFreq+0x338>)
 80032b2:	613b      	str	r3, [r7, #16]
       break;
 80032b4:	e15f      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032b6:	4bb4      	ldr	r3, [pc, #720]	; (8003588 <HAL_RCC_GetSysClockFreq+0x33c>)
 80032b8:	613b      	str	r3, [r7, #16]
      break;
 80032ba:	e15c      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032bc:	4bb0      	ldr	r3, [pc, #704]	; (8003580 <HAL_RCC_GetSysClockFreq+0x334>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032c4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032c6:	4bae      	ldr	r3, [pc, #696]	; (8003580 <HAL_RCC_GetSysClockFreq+0x334>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d04a      	beq.n	8003368 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d2:	4bab      	ldr	r3, [pc, #684]	; (8003580 <HAL_RCC_GetSysClockFreq+0x334>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	099b      	lsrs	r3, r3, #6
 80032d8:	f04f 0400 	mov.w	r4, #0
 80032dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	ea03 0501 	and.w	r5, r3, r1
 80032e8:	ea04 0602 	and.w	r6, r4, r2
 80032ec:	4629      	mov	r1, r5
 80032ee:	4632      	mov	r2, r6
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	f04f 0400 	mov.w	r4, #0
 80032f8:	0154      	lsls	r4, r2, #5
 80032fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032fe:	014b      	lsls	r3, r1, #5
 8003300:	4619      	mov	r1, r3
 8003302:	4622      	mov	r2, r4
 8003304:	1b49      	subs	r1, r1, r5
 8003306:	eb62 0206 	sbc.w	r2, r2, r6
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	f04f 0400 	mov.w	r4, #0
 8003312:	0194      	lsls	r4, r2, #6
 8003314:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003318:	018b      	lsls	r3, r1, #6
 800331a:	1a5b      	subs	r3, r3, r1
 800331c:	eb64 0402 	sbc.w	r4, r4, r2
 8003320:	f04f 0100 	mov.w	r1, #0
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	00e2      	lsls	r2, r4, #3
 800332a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800332e:	00d9      	lsls	r1, r3, #3
 8003330:	460b      	mov	r3, r1
 8003332:	4614      	mov	r4, r2
 8003334:	195b      	adds	r3, r3, r5
 8003336:	eb44 0406 	adc.w	r4, r4, r6
 800333a:	f04f 0100 	mov.w	r1, #0
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	0262      	lsls	r2, r4, #9
 8003344:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003348:	0259      	lsls	r1, r3, #9
 800334a:	460b      	mov	r3, r1
 800334c:	4614      	mov	r4, r2
 800334e:	4618      	mov	r0, r3
 8003350:	4621      	mov	r1, r4
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f04f 0400 	mov.w	r4, #0
 8003358:	461a      	mov	r2, r3
 800335a:	4623      	mov	r3, r4
 800335c:	f7fd fb92 	bl	8000a84 <__aeabi_uldivmod>
 8003360:	4603      	mov	r3, r0
 8003362:	460c      	mov	r4, r1
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	e049      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003368:	4b85      	ldr	r3, [pc, #532]	; (8003580 <HAL_RCC_GetSysClockFreq+0x334>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	099b      	lsrs	r3, r3, #6
 800336e:	f04f 0400 	mov.w	r4, #0
 8003372:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	ea03 0501 	and.w	r5, r3, r1
 800337e:	ea04 0602 	and.w	r6, r4, r2
 8003382:	4629      	mov	r1, r5
 8003384:	4632      	mov	r2, r6
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	f04f 0400 	mov.w	r4, #0
 800338e:	0154      	lsls	r4, r2, #5
 8003390:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003394:	014b      	lsls	r3, r1, #5
 8003396:	4619      	mov	r1, r3
 8003398:	4622      	mov	r2, r4
 800339a:	1b49      	subs	r1, r1, r5
 800339c:	eb62 0206 	sbc.w	r2, r2, r6
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	f04f 0400 	mov.w	r4, #0
 80033a8:	0194      	lsls	r4, r2, #6
 80033aa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033ae:	018b      	lsls	r3, r1, #6
 80033b0:	1a5b      	subs	r3, r3, r1
 80033b2:	eb64 0402 	sbc.w	r4, r4, r2
 80033b6:	f04f 0100 	mov.w	r1, #0
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	00e2      	lsls	r2, r4, #3
 80033c0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033c4:	00d9      	lsls	r1, r3, #3
 80033c6:	460b      	mov	r3, r1
 80033c8:	4614      	mov	r4, r2
 80033ca:	195b      	adds	r3, r3, r5
 80033cc:	eb44 0406 	adc.w	r4, r4, r6
 80033d0:	f04f 0100 	mov.w	r1, #0
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	02a2      	lsls	r2, r4, #10
 80033da:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80033de:	0299      	lsls	r1, r3, #10
 80033e0:	460b      	mov	r3, r1
 80033e2:	4614      	mov	r4, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	4621      	mov	r1, r4
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f04f 0400 	mov.w	r4, #0
 80033ee:	461a      	mov	r2, r3
 80033f0:	4623      	mov	r3, r4
 80033f2:	f7fd fb47 	bl	8000a84 <__aeabi_uldivmod>
 80033f6:	4603      	mov	r3, r0
 80033f8:	460c      	mov	r4, r1
 80033fa:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033fc:	4b60      	ldr	r3, [pc, #384]	; (8003580 <HAL_RCC_GetSysClockFreq+0x334>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	0c1b      	lsrs	r3, r3, #16
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	3301      	adds	r3, #1
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	fbb2 f3f3 	udiv	r3, r2, r3
 8003414:	613b      	str	r3, [r7, #16]
      break;
 8003416:	e0ae      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003418:	4b59      	ldr	r3, [pc, #356]	; (8003580 <HAL_RCC_GetSysClockFreq+0x334>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003420:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003422:	4b57      	ldr	r3, [pc, #348]	; (8003580 <HAL_RCC_GetSysClockFreq+0x334>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d04a      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800342e:	4b54      	ldr	r3, [pc, #336]	; (8003580 <HAL_RCC_GetSysClockFreq+0x334>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	099b      	lsrs	r3, r3, #6
 8003434:	f04f 0400 	mov.w	r4, #0
 8003438:	f240 11ff 	movw	r1, #511	; 0x1ff
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	ea03 0501 	and.w	r5, r3, r1
 8003444:	ea04 0602 	and.w	r6, r4, r2
 8003448:	4629      	mov	r1, r5
 800344a:	4632      	mov	r2, r6
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	f04f 0400 	mov.w	r4, #0
 8003454:	0154      	lsls	r4, r2, #5
 8003456:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800345a:	014b      	lsls	r3, r1, #5
 800345c:	4619      	mov	r1, r3
 800345e:	4622      	mov	r2, r4
 8003460:	1b49      	subs	r1, r1, r5
 8003462:	eb62 0206 	sbc.w	r2, r2, r6
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	f04f 0400 	mov.w	r4, #0
 800346e:	0194      	lsls	r4, r2, #6
 8003470:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003474:	018b      	lsls	r3, r1, #6
 8003476:	1a5b      	subs	r3, r3, r1
 8003478:	eb64 0402 	sbc.w	r4, r4, r2
 800347c:	f04f 0100 	mov.w	r1, #0
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	00e2      	lsls	r2, r4, #3
 8003486:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800348a:	00d9      	lsls	r1, r3, #3
 800348c:	460b      	mov	r3, r1
 800348e:	4614      	mov	r4, r2
 8003490:	195b      	adds	r3, r3, r5
 8003492:	eb44 0406 	adc.w	r4, r4, r6
 8003496:	f04f 0100 	mov.w	r1, #0
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	0262      	lsls	r2, r4, #9
 80034a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80034a4:	0259      	lsls	r1, r3, #9
 80034a6:	460b      	mov	r3, r1
 80034a8:	4614      	mov	r4, r2
 80034aa:	4618      	mov	r0, r3
 80034ac:	4621      	mov	r1, r4
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f04f 0400 	mov.w	r4, #0
 80034b4:	461a      	mov	r2, r3
 80034b6:	4623      	mov	r3, r4
 80034b8:	f7fd fae4 	bl	8000a84 <__aeabi_uldivmod>
 80034bc:	4603      	mov	r3, r0
 80034be:	460c      	mov	r4, r1
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	e049      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c4:	4b2e      	ldr	r3, [pc, #184]	; (8003580 <HAL_RCC_GetSysClockFreq+0x334>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	099b      	lsrs	r3, r3, #6
 80034ca:	f04f 0400 	mov.w	r4, #0
 80034ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	ea03 0501 	and.w	r5, r3, r1
 80034da:	ea04 0602 	and.w	r6, r4, r2
 80034de:	4629      	mov	r1, r5
 80034e0:	4632      	mov	r2, r6
 80034e2:	f04f 0300 	mov.w	r3, #0
 80034e6:	f04f 0400 	mov.w	r4, #0
 80034ea:	0154      	lsls	r4, r2, #5
 80034ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034f0:	014b      	lsls	r3, r1, #5
 80034f2:	4619      	mov	r1, r3
 80034f4:	4622      	mov	r2, r4
 80034f6:	1b49      	subs	r1, r1, r5
 80034f8:	eb62 0206 	sbc.w	r2, r2, r6
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	f04f 0400 	mov.w	r4, #0
 8003504:	0194      	lsls	r4, r2, #6
 8003506:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800350a:	018b      	lsls	r3, r1, #6
 800350c:	1a5b      	subs	r3, r3, r1
 800350e:	eb64 0402 	sbc.w	r4, r4, r2
 8003512:	f04f 0100 	mov.w	r1, #0
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	00e2      	lsls	r2, r4, #3
 800351c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003520:	00d9      	lsls	r1, r3, #3
 8003522:	460b      	mov	r3, r1
 8003524:	4614      	mov	r4, r2
 8003526:	195b      	adds	r3, r3, r5
 8003528:	eb44 0406 	adc.w	r4, r4, r6
 800352c:	f04f 0100 	mov.w	r1, #0
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	02a2      	lsls	r2, r4, #10
 8003536:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800353a:	0299      	lsls	r1, r3, #10
 800353c:	460b      	mov	r3, r1
 800353e:	4614      	mov	r4, r2
 8003540:	4618      	mov	r0, r3
 8003542:	4621      	mov	r1, r4
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f04f 0400 	mov.w	r4, #0
 800354a:	461a      	mov	r2, r3
 800354c:	4623      	mov	r3, r4
 800354e:	f7fd fa99 	bl	8000a84 <__aeabi_uldivmod>
 8003552:	4603      	mov	r3, r0
 8003554:	460c      	mov	r4, r1
 8003556:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003558:	4b09      	ldr	r3, [pc, #36]	; (8003580 <HAL_RCC_GetSysClockFreq+0x334>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	0f1b      	lsrs	r3, r3, #28
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	fbb2 f3f3 	udiv	r3, r2, r3
 800356c:	613b      	str	r3, [r7, #16]
      break;
 800356e:	e002      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003570:	4b04      	ldr	r3, [pc, #16]	; (8003584 <HAL_RCC_GetSysClockFreq+0x338>)
 8003572:	613b      	str	r3, [r7, #16]
      break;
 8003574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003576:	693b      	ldr	r3, [r7, #16]
}
 8003578:	4618      	mov	r0, r3
 800357a:	371c      	adds	r7, #28
 800357c:	46bd      	mov	sp, r7
 800357e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003580:	40023800 	.word	0x40023800
 8003584:	00f42400 	.word	0x00f42400
 8003588:	007a1200 	.word	0x007a1200

0800358c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8083 	beq.w	80036ac <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80035a6:	4b95      	ldr	r3, [pc, #596]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d019      	beq.n	80035e6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035b2:	4b92      	ldr	r3, [pc, #584]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d106      	bne.n	80035cc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035be:	4b8f      	ldr	r3, [pc, #572]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ca:	d00c      	beq.n	80035e6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035cc:	4b8b      	ldr	r3, [pc, #556]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035d4:	2b0c      	cmp	r3, #12
 80035d6:	d112      	bne.n	80035fe <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035d8:	4b88      	ldr	r3, [pc, #544]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035e4:	d10b      	bne.n	80035fe <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e6:	4b85      	ldr	r3, [pc, #532]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d05b      	beq.n	80036aa <HAL_RCC_OscConfig+0x11e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d157      	bne.n	80036aa <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e216      	b.n	8003a2c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003606:	d106      	bne.n	8003616 <HAL_RCC_OscConfig+0x8a>
 8003608:	4b7c      	ldr	r3, [pc, #496]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a7b      	ldr	r2, [pc, #492]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 800360e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	e01d      	b.n	8003652 <HAL_RCC_OscConfig+0xc6>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800361e:	d10c      	bne.n	800363a <HAL_RCC_OscConfig+0xae>
 8003620:	4b76      	ldr	r3, [pc, #472]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a75      	ldr	r2, [pc, #468]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 8003626:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	4b73      	ldr	r3, [pc, #460]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a72      	ldr	r2, [pc, #456]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 8003632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	e00b      	b.n	8003652 <HAL_RCC_OscConfig+0xc6>
 800363a:	4b70      	ldr	r3, [pc, #448]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a6f      	ldr	r2, [pc, #444]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 8003640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	4b6d      	ldr	r3, [pc, #436]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a6c      	ldr	r2, [pc, #432]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 800364c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003650:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d013      	beq.n	8003682 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365a:	f7fe f81d 	bl	8001698 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003662:	f7fe f819 	bl	8001698 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b64      	cmp	r3, #100	; 0x64
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e1db      	b.n	8003a2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003674:	4b61      	ldr	r3, [pc, #388]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0xd6>
 8003680:	e014      	b.n	80036ac <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003682:	f7fe f809 	bl	8001698 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800368a:	f7fe f805 	bl	8001698 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b64      	cmp	r3, #100	; 0x64
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e1c7      	b.n	8003a2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800369c:	4b57      	ldr	r3, [pc, #348]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1f0      	bne.n	800368a <HAL_RCC_OscConfig+0xfe>
 80036a8:	e000      	b.n	80036ac <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d06f      	beq.n	8003798 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036b8:	4b50      	ldr	r3, [pc, #320]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 030c 	and.w	r3, r3, #12
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d017      	beq.n	80036f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036c4:	4b4d      	ldr	r3, [pc, #308]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d105      	bne.n	80036dc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036d0:	4b4a      	ldr	r3, [pc, #296]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00b      	beq.n	80036f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036dc:	4b47      	ldr	r3, [pc, #284]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036e4:	2b0c      	cmp	r3, #12
 80036e6:	d11c      	bne.n	8003722 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036e8:	4b44      	ldr	r3, [pc, #272]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d116      	bne.n	8003722 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f4:	4b41      	ldr	r3, [pc, #260]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_RCC_OscConfig+0x180>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d001      	beq.n	800370c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e18f      	b.n	8003a2c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370c:	4b3b      	ldr	r3, [pc, #236]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4938      	ldr	r1, [pc, #224]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 800371c:	4313      	orrs	r3, r2
 800371e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003720:	e03a      	b.n	8003798 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d020      	beq.n	800376c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800372a:	4b35      	ldr	r3, [pc, #212]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 800372c:	2201      	movs	r2, #1
 800372e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003730:	f7fd ffb2 	bl	8001698 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003738:	f7fd ffae 	bl	8001698 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e170      	b.n	8003a2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374a:	4b2c      	ldr	r3, [pc, #176]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003756:	4b29      	ldr	r3, [pc, #164]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	4925      	ldr	r1, [pc, #148]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 8003766:	4313      	orrs	r3, r2
 8003768:	600b      	str	r3, [r1, #0]
 800376a:	e015      	b.n	8003798 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800376c:	4b24      	ldr	r3, [pc, #144]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003772:	f7fd ff91 	bl	8001698 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800377a:	f7fd ff8d 	bl	8001698 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e14f      	b.n	8003a2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378c:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1f0      	bne.n	800377a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d037      	beq.n	8003814 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d016      	beq.n	80037da <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ac:	4b15      	ldr	r3, [pc, #84]	; (8003804 <HAL_RCC_OscConfig+0x278>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b2:	f7fd ff71 	bl	8001698 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ba:	f7fd ff6d 	bl	8001698 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e12f      	b.n	8003a2c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_RCC_OscConfig+0x270>)
 80037ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f0      	beq.n	80037ba <HAL_RCC_OscConfig+0x22e>
 80037d8:	e01c      	b.n	8003814 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037da:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <HAL_RCC_OscConfig+0x278>)
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e0:	f7fd ff5a 	bl	8001698 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e6:	e00f      	b.n	8003808 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e8:	f7fd ff56 	bl	8001698 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d908      	bls.n	8003808 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e118      	b.n	8003a2c <HAL_RCC_OscConfig+0x4a0>
 80037fa:	bf00      	nop
 80037fc:	40023800 	.word	0x40023800
 8003800:	42470000 	.word	0x42470000
 8003804:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003808:	4b8a      	ldr	r3, [pc, #552]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 800380a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e9      	bne.n	80037e8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 8097 	beq.w	8003950 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003822:	2300      	movs	r3, #0
 8003824:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003826:	4b83      	ldr	r3, [pc, #524]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10f      	bne.n	8003852 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	4b7f      	ldr	r3, [pc, #508]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	4a7e      	ldr	r2, [pc, #504]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 800383c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003840:	6413      	str	r3, [r2, #64]	; 0x40
 8003842:	4b7c      	ldr	r3, [pc, #496]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800384e:	2301      	movs	r3, #1
 8003850:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003852:	4b79      	ldr	r3, [pc, #484]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d118      	bne.n	8003890 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800385e:	4b76      	ldr	r3, [pc, #472]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a75      	ldr	r2, [pc, #468]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 8003864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800386a:	f7fd ff15 	bl	8001698 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003872:	f7fd ff11 	bl	8001698 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e0d3      	b.n	8003a2c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003884:	4b6c      	ldr	r3, [pc, #432]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d106      	bne.n	80038a6 <HAL_RCC_OscConfig+0x31a>
 8003898:	4b66      	ldr	r3, [pc, #408]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389c:	4a65      	ldr	r2, [pc, #404]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	6713      	str	r3, [r2, #112]	; 0x70
 80038a4:	e01c      	b.n	80038e0 <HAL_RCC_OscConfig+0x354>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b05      	cmp	r3, #5
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x33c>
 80038ae:	4b61      	ldr	r3, [pc, #388]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 80038b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b2:	4a60      	ldr	r2, [pc, #384]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 80038b4:	f043 0304 	orr.w	r3, r3, #4
 80038b8:	6713      	str	r3, [r2, #112]	; 0x70
 80038ba:	4b5e      	ldr	r3, [pc, #376]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 80038bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038be:	4a5d      	ldr	r2, [pc, #372]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	6713      	str	r3, [r2, #112]	; 0x70
 80038c6:	e00b      	b.n	80038e0 <HAL_RCC_OscConfig+0x354>
 80038c8:	4b5a      	ldr	r3, [pc, #360]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 80038ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038cc:	4a59      	ldr	r2, [pc, #356]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 80038ce:	f023 0301 	bic.w	r3, r3, #1
 80038d2:	6713      	str	r3, [r2, #112]	; 0x70
 80038d4:	4b57      	ldr	r3, [pc, #348]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 80038d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d8:	4a56      	ldr	r2, [pc, #344]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 80038da:	f023 0304 	bic.w	r3, r3, #4
 80038de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d015      	beq.n	8003914 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e8:	f7fd fed6 	bl	8001698 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ee:	e00a      	b.n	8003906 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038f0:	f7fd fed2 	bl	8001698 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e092      	b.n	8003a2c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003906:	4b4b      	ldr	r3, [pc, #300]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0ee      	beq.n	80038f0 <HAL_RCC_OscConfig+0x364>
 8003912:	e014      	b.n	800393e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003914:	f7fd fec0 	bl	8001698 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800391a:	e00a      	b.n	8003932 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800391c:	f7fd febc 	bl	8001698 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	f241 3288 	movw	r2, #5000	; 0x1388
 800392a:	4293      	cmp	r3, r2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e07c      	b.n	8003a2c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003932:	4b40      	ldr	r3, [pc, #256]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1ee      	bne.n	800391c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800393e:	7dfb      	ldrb	r3, [r7, #23]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d105      	bne.n	8003950 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003944:	4b3b      	ldr	r3, [pc, #236]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	4a3a      	ldr	r2, [pc, #232]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 800394a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800394e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d068      	beq.n	8003a2a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003958:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 030c 	and.w	r3, r3, #12
 8003960:	2b08      	cmp	r3, #8
 8003962:	d060      	beq.n	8003a26 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d145      	bne.n	80039f8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396c:	4b33      	ldr	r3, [pc, #204]	; (8003a3c <HAL_RCC_OscConfig+0x4b0>)
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003972:	f7fd fe91 	bl	8001698 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800397a:	f7fd fe8d 	bl	8001698 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e04f      	b.n	8003a2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398c:	4b29      	ldr	r3, [pc, #164]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f0      	bne.n	800397a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69da      	ldr	r2, [r3, #28]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	019b      	lsls	r3, r3, #6
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ae:	085b      	lsrs	r3, r3, #1
 80039b0:	3b01      	subs	r3, #1
 80039b2:	041b      	lsls	r3, r3, #16
 80039b4:	431a      	orrs	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ba:	061b      	lsls	r3, r3, #24
 80039bc:	431a      	orrs	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	071b      	lsls	r3, r3, #28
 80039c4:	491b      	ldr	r1, [pc, #108]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ca:	4b1c      	ldr	r3, [pc, #112]	; (8003a3c <HAL_RCC_OscConfig+0x4b0>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fd fe62 	bl	8001698 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d8:	f7fd fe5e 	bl	8001698 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e020      	b.n	8003a2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ea:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x44c>
 80039f6:	e018      	b.n	8003a2a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f8:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <HAL_RCC_OscConfig+0x4b0>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fe:	f7fd fe4b 	bl	8001698 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a06:	f7fd fe47 	bl	8001698 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e009      	b.n	8003a2c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a18:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_RCC_OscConfig+0x4a8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1f0      	bne.n	8003a06 <HAL_RCC_OscConfig+0x47a>
 8003a24:	e001      	b.n	8003a2a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40007000 	.word	0x40007000
 8003a3c:	42470060 	.word	0x42470060

08003a40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e03f      	b.n	8003ad2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fd fcfa 	bl	8001460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2224      	movs	r2, #36	; 0x24
 8003a70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f829 	bl	8003adc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695a      	ldr	r2, [r3, #20]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ab8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae0:	b085      	sub	sp, #20
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b1e:	f023 030c 	bic.w	r3, r3, #12
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6812      	ldr	r2, [r2, #0]
 8003b26:	68f9      	ldr	r1, [r7, #12]
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b4a:	f040 818b 	bne.w	8003e64 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4ac1      	ldr	r2, [pc, #772]	; (8003e58 <UART_SetConfig+0x37c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d005      	beq.n	8003b64 <UART_SetConfig+0x88>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4abf      	ldr	r2, [pc, #764]	; (8003e5c <UART_SetConfig+0x380>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	f040 80bd 	bne.w	8003cde <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b64:	f7ff fb5e 	bl	8003224 <HAL_RCC_GetPCLK2Freq>
 8003b68:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	461d      	mov	r5, r3
 8003b6e:	f04f 0600 	mov.w	r6, #0
 8003b72:	46a8      	mov	r8, r5
 8003b74:	46b1      	mov	r9, r6
 8003b76:	eb18 0308 	adds.w	r3, r8, r8
 8003b7a:	eb49 0409 	adc.w	r4, r9, r9
 8003b7e:	4698      	mov	r8, r3
 8003b80:	46a1      	mov	r9, r4
 8003b82:	eb18 0805 	adds.w	r8, r8, r5
 8003b86:	eb49 0906 	adc.w	r9, r9, r6
 8003b8a:	f04f 0100 	mov.w	r1, #0
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b96:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b9a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b9e:	4688      	mov	r8, r1
 8003ba0:	4691      	mov	r9, r2
 8003ba2:	eb18 0005 	adds.w	r0, r8, r5
 8003ba6:	eb49 0106 	adc.w	r1, r9, r6
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	461d      	mov	r5, r3
 8003bb0:	f04f 0600 	mov.w	r6, #0
 8003bb4:	196b      	adds	r3, r5, r5
 8003bb6:	eb46 0406 	adc.w	r4, r6, r6
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4623      	mov	r3, r4
 8003bbe:	f7fc ff61 	bl	8000a84 <__aeabi_uldivmod>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	460c      	mov	r4, r1
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4ba5      	ldr	r3, [pc, #660]	; (8003e60 <UART_SetConfig+0x384>)
 8003bca:	fba3 2302 	umull	r2, r3, r3, r2
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	461d      	mov	r5, r3
 8003bd8:	f04f 0600 	mov.w	r6, #0
 8003bdc:	46a9      	mov	r9, r5
 8003bde:	46b2      	mov	sl, r6
 8003be0:	eb19 0309 	adds.w	r3, r9, r9
 8003be4:	eb4a 040a 	adc.w	r4, sl, sl
 8003be8:	4699      	mov	r9, r3
 8003bea:	46a2      	mov	sl, r4
 8003bec:	eb19 0905 	adds.w	r9, r9, r5
 8003bf0:	eb4a 0a06 	adc.w	sl, sl, r6
 8003bf4:	f04f 0100 	mov.w	r1, #0
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c08:	4689      	mov	r9, r1
 8003c0a:	4692      	mov	sl, r2
 8003c0c:	eb19 0005 	adds.w	r0, r9, r5
 8003c10:	eb4a 0106 	adc.w	r1, sl, r6
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	461d      	mov	r5, r3
 8003c1a:	f04f 0600 	mov.w	r6, #0
 8003c1e:	196b      	adds	r3, r5, r5
 8003c20:	eb46 0406 	adc.w	r4, r6, r6
 8003c24:	461a      	mov	r2, r3
 8003c26:	4623      	mov	r3, r4
 8003c28:	f7fc ff2c 	bl	8000a84 <__aeabi_uldivmod>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	460c      	mov	r4, r1
 8003c30:	461a      	mov	r2, r3
 8003c32:	4b8b      	ldr	r3, [pc, #556]	; (8003e60 <UART_SetConfig+0x384>)
 8003c34:	fba3 1302 	umull	r1, r3, r3, r2
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	2164      	movs	r1, #100	; 0x64
 8003c3c:	fb01 f303 	mul.w	r3, r1, r3
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	3332      	adds	r3, #50	; 0x32
 8003c46:	4a86      	ldr	r2, [pc, #536]	; (8003e60 <UART_SetConfig+0x384>)
 8003c48:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4c:	095b      	lsrs	r3, r3, #5
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c54:	4498      	add	r8, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	461d      	mov	r5, r3
 8003c5a:	f04f 0600 	mov.w	r6, #0
 8003c5e:	46a9      	mov	r9, r5
 8003c60:	46b2      	mov	sl, r6
 8003c62:	eb19 0309 	adds.w	r3, r9, r9
 8003c66:	eb4a 040a 	adc.w	r4, sl, sl
 8003c6a:	4699      	mov	r9, r3
 8003c6c:	46a2      	mov	sl, r4
 8003c6e:	eb19 0905 	adds.w	r9, r9, r5
 8003c72:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c76:	f04f 0100 	mov.w	r1, #0
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c8a:	4689      	mov	r9, r1
 8003c8c:	4692      	mov	sl, r2
 8003c8e:	eb19 0005 	adds.w	r0, r9, r5
 8003c92:	eb4a 0106 	adc.w	r1, sl, r6
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	461d      	mov	r5, r3
 8003c9c:	f04f 0600 	mov.w	r6, #0
 8003ca0:	196b      	adds	r3, r5, r5
 8003ca2:	eb46 0406 	adc.w	r4, r6, r6
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	4623      	mov	r3, r4
 8003caa:	f7fc feeb 	bl	8000a84 <__aeabi_uldivmod>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	460c      	mov	r4, r1
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	4b6a      	ldr	r3, [pc, #424]	; (8003e60 <UART_SetConfig+0x384>)
 8003cb6:	fba3 1302 	umull	r1, r3, r3, r2
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	2164      	movs	r1, #100	; 0x64
 8003cbe:	fb01 f303 	mul.w	r3, r1, r3
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	3332      	adds	r3, #50	; 0x32
 8003cc8:	4a65      	ldr	r2, [pc, #404]	; (8003e60 <UART_SetConfig+0x384>)
 8003cca:	fba2 2303 	umull	r2, r3, r2, r3
 8003cce:	095b      	lsrs	r3, r3, #5
 8003cd0:	f003 0207 	and.w	r2, r3, #7
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4442      	add	r2, r8
 8003cda:	609a      	str	r2, [r3, #8]
 8003cdc:	e26f      	b.n	80041be <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cde:	f7ff fa8d 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8003ce2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	461d      	mov	r5, r3
 8003ce8:	f04f 0600 	mov.w	r6, #0
 8003cec:	46a8      	mov	r8, r5
 8003cee:	46b1      	mov	r9, r6
 8003cf0:	eb18 0308 	adds.w	r3, r8, r8
 8003cf4:	eb49 0409 	adc.w	r4, r9, r9
 8003cf8:	4698      	mov	r8, r3
 8003cfa:	46a1      	mov	r9, r4
 8003cfc:	eb18 0805 	adds.w	r8, r8, r5
 8003d00:	eb49 0906 	adc.w	r9, r9, r6
 8003d04:	f04f 0100 	mov.w	r1, #0
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d10:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d14:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d18:	4688      	mov	r8, r1
 8003d1a:	4691      	mov	r9, r2
 8003d1c:	eb18 0005 	adds.w	r0, r8, r5
 8003d20:	eb49 0106 	adc.w	r1, r9, r6
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	461d      	mov	r5, r3
 8003d2a:	f04f 0600 	mov.w	r6, #0
 8003d2e:	196b      	adds	r3, r5, r5
 8003d30:	eb46 0406 	adc.w	r4, r6, r6
 8003d34:	461a      	mov	r2, r3
 8003d36:	4623      	mov	r3, r4
 8003d38:	f7fc fea4 	bl	8000a84 <__aeabi_uldivmod>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	460c      	mov	r4, r1
 8003d40:	461a      	mov	r2, r3
 8003d42:	4b47      	ldr	r3, [pc, #284]	; (8003e60 <UART_SetConfig+0x384>)
 8003d44:	fba3 2302 	umull	r2, r3, r3, r2
 8003d48:	095b      	lsrs	r3, r3, #5
 8003d4a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	461d      	mov	r5, r3
 8003d52:	f04f 0600 	mov.w	r6, #0
 8003d56:	46a9      	mov	r9, r5
 8003d58:	46b2      	mov	sl, r6
 8003d5a:	eb19 0309 	adds.w	r3, r9, r9
 8003d5e:	eb4a 040a 	adc.w	r4, sl, sl
 8003d62:	4699      	mov	r9, r3
 8003d64:	46a2      	mov	sl, r4
 8003d66:	eb19 0905 	adds.w	r9, r9, r5
 8003d6a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d6e:	f04f 0100 	mov.w	r1, #0
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d82:	4689      	mov	r9, r1
 8003d84:	4692      	mov	sl, r2
 8003d86:	eb19 0005 	adds.w	r0, r9, r5
 8003d8a:	eb4a 0106 	adc.w	r1, sl, r6
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	461d      	mov	r5, r3
 8003d94:	f04f 0600 	mov.w	r6, #0
 8003d98:	196b      	adds	r3, r5, r5
 8003d9a:	eb46 0406 	adc.w	r4, r6, r6
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4623      	mov	r3, r4
 8003da2:	f7fc fe6f 	bl	8000a84 <__aeabi_uldivmod>
 8003da6:	4603      	mov	r3, r0
 8003da8:	460c      	mov	r4, r1
 8003daa:	461a      	mov	r2, r3
 8003dac:	4b2c      	ldr	r3, [pc, #176]	; (8003e60 <UART_SetConfig+0x384>)
 8003dae:	fba3 1302 	umull	r1, r3, r3, r2
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	2164      	movs	r1, #100	; 0x64
 8003db6:	fb01 f303 	mul.w	r3, r1, r3
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	3332      	adds	r3, #50	; 0x32
 8003dc0:	4a27      	ldr	r2, [pc, #156]	; (8003e60 <UART_SetConfig+0x384>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	095b      	lsrs	r3, r3, #5
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dce:	4498      	add	r8, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	461d      	mov	r5, r3
 8003dd4:	f04f 0600 	mov.w	r6, #0
 8003dd8:	46a9      	mov	r9, r5
 8003dda:	46b2      	mov	sl, r6
 8003ddc:	eb19 0309 	adds.w	r3, r9, r9
 8003de0:	eb4a 040a 	adc.w	r4, sl, sl
 8003de4:	4699      	mov	r9, r3
 8003de6:	46a2      	mov	sl, r4
 8003de8:	eb19 0905 	adds.w	r9, r9, r5
 8003dec:	eb4a 0a06 	adc.w	sl, sl, r6
 8003df0:	f04f 0100 	mov.w	r1, #0
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dfc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e04:	4689      	mov	r9, r1
 8003e06:	4692      	mov	sl, r2
 8003e08:	eb19 0005 	adds.w	r0, r9, r5
 8003e0c:	eb4a 0106 	adc.w	r1, sl, r6
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	461d      	mov	r5, r3
 8003e16:	f04f 0600 	mov.w	r6, #0
 8003e1a:	196b      	adds	r3, r5, r5
 8003e1c:	eb46 0406 	adc.w	r4, r6, r6
 8003e20:	461a      	mov	r2, r3
 8003e22:	4623      	mov	r3, r4
 8003e24:	f7fc fe2e 	bl	8000a84 <__aeabi_uldivmod>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	460c      	mov	r4, r1
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <UART_SetConfig+0x384>)
 8003e30:	fba3 1302 	umull	r1, r3, r3, r2
 8003e34:	095b      	lsrs	r3, r3, #5
 8003e36:	2164      	movs	r1, #100	; 0x64
 8003e38:	fb01 f303 	mul.w	r3, r1, r3
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	3332      	adds	r3, #50	; 0x32
 8003e42:	4a07      	ldr	r2, [pc, #28]	; (8003e60 <UART_SetConfig+0x384>)
 8003e44:	fba2 2303 	umull	r2, r3, r2, r3
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	f003 0207 	and.w	r2, r3, #7
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4442      	add	r2, r8
 8003e54:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003e56:	e1b2      	b.n	80041be <UART_SetConfig+0x6e2>
 8003e58:	40011000 	.word	0x40011000
 8003e5c:	40011400 	.word	0x40011400
 8003e60:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4ad7      	ldr	r2, [pc, #860]	; (80041c8 <UART_SetConfig+0x6ec>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d005      	beq.n	8003e7a <UART_SetConfig+0x39e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4ad6      	ldr	r2, [pc, #856]	; (80041cc <UART_SetConfig+0x6f0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	f040 80d1 	bne.w	800401c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e7a:	f7ff f9d3 	bl	8003224 <HAL_RCC_GetPCLK2Freq>
 8003e7e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	469a      	mov	sl, r3
 8003e84:	f04f 0b00 	mov.w	fp, #0
 8003e88:	46d0      	mov	r8, sl
 8003e8a:	46d9      	mov	r9, fp
 8003e8c:	eb18 0308 	adds.w	r3, r8, r8
 8003e90:	eb49 0409 	adc.w	r4, r9, r9
 8003e94:	4698      	mov	r8, r3
 8003e96:	46a1      	mov	r9, r4
 8003e98:	eb18 080a 	adds.w	r8, r8, sl
 8003e9c:	eb49 090b 	adc.w	r9, r9, fp
 8003ea0:	f04f 0100 	mov.w	r1, #0
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003eac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003eb0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003eb4:	4688      	mov	r8, r1
 8003eb6:	4691      	mov	r9, r2
 8003eb8:	eb1a 0508 	adds.w	r5, sl, r8
 8003ebc:	eb4b 0609 	adc.w	r6, fp, r9
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	f04f 0300 	mov.w	r3, #0
 8003ece:	f04f 0400 	mov.w	r4, #0
 8003ed2:	0094      	lsls	r4, r2, #2
 8003ed4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ed8:	008b      	lsls	r3, r1, #2
 8003eda:	461a      	mov	r2, r3
 8003edc:	4623      	mov	r3, r4
 8003ede:	4628      	mov	r0, r5
 8003ee0:	4631      	mov	r1, r6
 8003ee2:	f7fc fdcf 	bl	8000a84 <__aeabi_uldivmod>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	460c      	mov	r4, r1
 8003eea:	461a      	mov	r2, r3
 8003eec:	4bb8      	ldr	r3, [pc, #736]	; (80041d0 <UART_SetConfig+0x6f4>)
 8003eee:	fba3 2302 	umull	r2, r3, r3, r2
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	469b      	mov	fp, r3
 8003efc:	f04f 0c00 	mov.w	ip, #0
 8003f00:	46d9      	mov	r9, fp
 8003f02:	46e2      	mov	sl, ip
 8003f04:	eb19 0309 	adds.w	r3, r9, r9
 8003f08:	eb4a 040a 	adc.w	r4, sl, sl
 8003f0c:	4699      	mov	r9, r3
 8003f0e:	46a2      	mov	sl, r4
 8003f10:	eb19 090b 	adds.w	r9, r9, fp
 8003f14:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f18:	f04f 0100 	mov.w	r1, #0
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f2c:	4689      	mov	r9, r1
 8003f2e:	4692      	mov	sl, r2
 8003f30:	eb1b 0509 	adds.w	r5, fp, r9
 8003f34:	eb4c 060a 	adc.w	r6, ip, sl
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	f04f 0400 	mov.w	r4, #0
 8003f4a:	0094      	lsls	r4, r2, #2
 8003f4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f50:	008b      	lsls	r3, r1, #2
 8003f52:	461a      	mov	r2, r3
 8003f54:	4623      	mov	r3, r4
 8003f56:	4628      	mov	r0, r5
 8003f58:	4631      	mov	r1, r6
 8003f5a:	f7fc fd93 	bl	8000a84 <__aeabi_uldivmod>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	460c      	mov	r4, r1
 8003f62:	461a      	mov	r2, r3
 8003f64:	4b9a      	ldr	r3, [pc, #616]	; (80041d0 <UART_SetConfig+0x6f4>)
 8003f66:	fba3 1302 	umull	r1, r3, r3, r2
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	2164      	movs	r1, #100	; 0x64
 8003f6e:	fb01 f303 	mul.w	r3, r1, r3
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	3332      	adds	r3, #50	; 0x32
 8003f78:	4a95      	ldr	r2, [pc, #596]	; (80041d0 <UART_SetConfig+0x6f4>)
 8003f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f84:	4498      	add	r8, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	469b      	mov	fp, r3
 8003f8a:	f04f 0c00 	mov.w	ip, #0
 8003f8e:	46d9      	mov	r9, fp
 8003f90:	46e2      	mov	sl, ip
 8003f92:	eb19 0309 	adds.w	r3, r9, r9
 8003f96:	eb4a 040a 	adc.w	r4, sl, sl
 8003f9a:	4699      	mov	r9, r3
 8003f9c:	46a2      	mov	sl, r4
 8003f9e:	eb19 090b 	adds.w	r9, r9, fp
 8003fa2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fa6:	f04f 0100 	mov.w	r1, #0
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fb2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fba:	4689      	mov	r9, r1
 8003fbc:	4692      	mov	sl, r2
 8003fbe:	eb1b 0509 	adds.w	r5, fp, r9
 8003fc2:	eb4c 060a 	adc.w	r6, ip, sl
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	f04f 0400 	mov.w	r4, #0
 8003fd8:	0094      	lsls	r4, r2, #2
 8003fda:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fde:	008b      	lsls	r3, r1, #2
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4623      	mov	r3, r4
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	4631      	mov	r1, r6
 8003fe8:	f7fc fd4c 	bl	8000a84 <__aeabi_uldivmod>
 8003fec:	4603      	mov	r3, r0
 8003fee:	460c      	mov	r4, r1
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	4b77      	ldr	r3, [pc, #476]	; (80041d0 <UART_SetConfig+0x6f4>)
 8003ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	2164      	movs	r1, #100	; 0x64
 8003ffc:	fb01 f303 	mul.w	r3, r1, r3
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	3332      	adds	r3, #50	; 0x32
 8004006:	4a72      	ldr	r2, [pc, #456]	; (80041d0 <UART_SetConfig+0x6f4>)
 8004008:	fba2 2303 	umull	r2, r3, r2, r3
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	f003 020f 	and.w	r2, r3, #15
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4442      	add	r2, r8
 8004018:	609a      	str	r2, [r3, #8]
 800401a:	e0d0      	b.n	80041be <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800401c:	f7ff f8ee 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8004020:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	469a      	mov	sl, r3
 8004026:	f04f 0b00 	mov.w	fp, #0
 800402a:	46d0      	mov	r8, sl
 800402c:	46d9      	mov	r9, fp
 800402e:	eb18 0308 	adds.w	r3, r8, r8
 8004032:	eb49 0409 	adc.w	r4, r9, r9
 8004036:	4698      	mov	r8, r3
 8004038:	46a1      	mov	r9, r4
 800403a:	eb18 080a 	adds.w	r8, r8, sl
 800403e:	eb49 090b 	adc.w	r9, r9, fp
 8004042:	f04f 0100 	mov.w	r1, #0
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800404e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004052:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004056:	4688      	mov	r8, r1
 8004058:	4691      	mov	r9, r2
 800405a:	eb1a 0508 	adds.w	r5, sl, r8
 800405e:	eb4b 0609 	adc.w	r6, fp, r9
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	4619      	mov	r1, r3
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	f04f 0400 	mov.w	r4, #0
 8004074:	0094      	lsls	r4, r2, #2
 8004076:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800407a:	008b      	lsls	r3, r1, #2
 800407c:	461a      	mov	r2, r3
 800407e:	4623      	mov	r3, r4
 8004080:	4628      	mov	r0, r5
 8004082:	4631      	mov	r1, r6
 8004084:	f7fc fcfe 	bl	8000a84 <__aeabi_uldivmod>
 8004088:	4603      	mov	r3, r0
 800408a:	460c      	mov	r4, r1
 800408c:	461a      	mov	r2, r3
 800408e:	4b50      	ldr	r3, [pc, #320]	; (80041d0 <UART_SetConfig+0x6f4>)
 8004090:	fba3 2302 	umull	r2, r3, r3, r2
 8004094:	095b      	lsrs	r3, r3, #5
 8004096:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	469b      	mov	fp, r3
 800409e:	f04f 0c00 	mov.w	ip, #0
 80040a2:	46d9      	mov	r9, fp
 80040a4:	46e2      	mov	sl, ip
 80040a6:	eb19 0309 	adds.w	r3, r9, r9
 80040aa:	eb4a 040a 	adc.w	r4, sl, sl
 80040ae:	4699      	mov	r9, r3
 80040b0:	46a2      	mov	sl, r4
 80040b2:	eb19 090b 	adds.w	r9, r9, fp
 80040b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040ba:	f04f 0100 	mov.w	r1, #0
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040ce:	4689      	mov	r9, r1
 80040d0:	4692      	mov	sl, r2
 80040d2:	eb1b 0509 	adds.w	r5, fp, r9
 80040d6:	eb4c 060a 	adc.w	r6, ip, sl
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	4619      	mov	r1, r3
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	f04f 0400 	mov.w	r4, #0
 80040ec:	0094      	lsls	r4, r2, #2
 80040ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040f2:	008b      	lsls	r3, r1, #2
 80040f4:	461a      	mov	r2, r3
 80040f6:	4623      	mov	r3, r4
 80040f8:	4628      	mov	r0, r5
 80040fa:	4631      	mov	r1, r6
 80040fc:	f7fc fcc2 	bl	8000a84 <__aeabi_uldivmod>
 8004100:	4603      	mov	r3, r0
 8004102:	460c      	mov	r4, r1
 8004104:	461a      	mov	r2, r3
 8004106:	4b32      	ldr	r3, [pc, #200]	; (80041d0 <UART_SetConfig+0x6f4>)
 8004108:	fba3 1302 	umull	r1, r3, r3, r2
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	2164      	movs	r1, #100	; 0x64
 8004110:	fb01 f303 	mul.w	r3, r1, r3
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	3332      	adds	r3, #50	; 0x32
 800411a:	4a2d      	ldr	r2, [pc, #180]	; (80041d0 <UART_SetConfig+0x6f4>)
 800411c:	fba2 2303 	umull	r2, r3, r2, r3
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004126:	4498      	add	r8, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	469b      	mov	fp, r3
 800412c:	f04f 0c00 	mov.w	ip, #0
 8004130:	46d9      	mov	r9, fp
 8004132:	46e2      	mov	sl, ip
 8004134:	eb19 0309 	adds.w	r3, r9, r9
 8004138:	eb4a 040a 	adc.w	r4, sl, sl
 800413c:	4699      	mov	r9, r3
 800413e:	46a2      	mov	sl, r4
 8004140:	eb19 090b 	adds.w	r9, r9, fp
 8004144:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004148:	f04f 0100 	mov.w	r1, #0
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004154:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004158:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800415c:	4689      	mov	r9, r1
 800415e:	4692      	mov	sl, r2
 8004160:	eb1b 0509 	adds.w	r5, fp, r9
 8004164:	eb4c 060a 	adc.w	r6, ip, sl
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	4619      	mov	r1, r3
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	f04f 0400 	mov.w	r4, #0
 800417a:	0094      	lsls	r4, r2, #2
 800417c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004180:	008b      	lsls	r3, r1, #2
 8004182:	461a      	mov	r2, r3
 8004184:	4623      	mov	r3, r4
 8004186:	4628      	mov	r0, r5
 8004188:	4631      	mov	r1, r6
 800418a:	f7fc fc7b 	bl	8000a84 <__aeabi_uldivmod>
 800418e:	4603      	mov	r3, r0
 8004190:	460c      	mov	r4, r1
 8004192:	461a      	mov	r2, r3
 8004194:	4b0e      	ldr	r3, [pc, #56]	; (80041d0 <UART_SetConfig+0x6f4>)
 8004196:	fba3 1302 	umull	r1, r3, r3, r2
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	2164      	movs	r1, #100	; 0x64
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	3332      	adds	r3, #50	; 0x32
 80041a8:	4a09      	ldr	r2, [pc, #36]	; (80041d0 <UART_SetConfig+0x6f4>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	f003 020f 	and.w	r2, r3, #15
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4442      	add	r2, r8
 80041ba:	609a      	str	r2, [r3, #8]
}
 80041bc:	e7ff      	b.n	80041be <UART_SetConfig+0x6e2>
 80041be:	bf00      	nop
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c8:	40011000 	.word	0x40011000
 80041cc:	40011400 	.word	0x40011400
 80041d0:	51eb851f 	.word	0x51eb851f

080041d4 <__libc_init_array>:
 80041d4:	b570      	push	{r4, r5, r6, lr}
 80041d6:	4e0d      	ldr	r6, [pc, #52]	; (800420c <__libc_init_array+0x38>)
 80041d8:	4c0d      	ldr	r4, [pc, #52]	; (8004210 <__libc_init_array+0x3c>)
 80041da:	1ba4      	subs	r4, r4, r6
 80041dc:	10a4      	asrs	r4, r4, #2
 80041de:	2500      	movs	r5, #0
 80041e0:	42a5      	cmp	r5, r4
 80041e2:	d109      	bne.n	80041f8 <__libc_init_array+0x24>
 80041e4:	4e0b      	ldr	r6, [pc, #44]	; (8004214 <__libc_init_array+0x40>)
 80041e6:	4c0c      	ldr	r4, [pc, #48]	; (8004218 <__libc_init_array+0x44>)
 80041e8:	f000 f820 	bl	800422c <_init>
 80041ec:	1ba4      	subs	r4, r4, r6
 80041ee:	10a4      	asrs	r4, r4, #2
 80041f0:	2500      	movs	r5, #0
 80041f2:	42a5      	cmp	r5, r4
 80041f4:	d105      	bne.n	8004202 <__libc_init_array+0x2e>
 80041f6:	bd70      	pop	{r4, r5, r6, pc}
 80041f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041fc:	4798      	blx	r3
 80041fe:	3501      	adds	r5, #1
 8004200:	e7ee      	b.n	80041e0 <__libc_init_array+0xc>
 8004202:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004206:	4798      	blx	r3
 8004208:	3501      	adds	r5, #1
 800420a:	e7f2      	b.n	80041f2 <__libc_init_array+0x1e>
 800420c:	08004264 	.word	0x08004264
 8004210:	08004264 	.word	0x08004264
 8004214:	08004264 	.word	0x08004264
 8004218:	08004268 	.word	0x08004268

0800421c <memset>:
 800421c:	4402      	add	r2, r0
 800421e:	4603      	mov	r3, r0
 8004220:	4293      	cmp	r3, r2
 8004222:	d100      	bne.n	8004226 <memset+0xa>
 8004224:	4770      	bx	lr
 8004226:	f803 1b01 	strb.w	r1, [r3], #1
 800422a:	e7f9      	b.n	8004220 <memset+0x4>

0800422c <_init>:
 800422c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422e:	bf00      	nop
 8004230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004232:	bc08      	pop	{r3}
 8004234:	469e      	mov	lr, r3
 8004236:	4770      	bx	lr

08004238 <_fini>:
 8004238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423a:	bf00      	nop
 800423c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423e:	bc08      	pop	{r3}
 8004240:	469e      	mov	lr, r3
 8004242:	4770      	bx	lr
